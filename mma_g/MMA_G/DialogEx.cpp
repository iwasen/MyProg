//*****************************************************************************************************
//  1. ファイル名
//		DialogEx.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		拡張ダイアログクラスの実装
//----------------------------------------------------------------------------------------------------
//  3. 備考
//		拡張機能は次の通り
//		・ウィンドウサイズ変更を可能にし、サイズ変更に伴って各コントロールを再配置する。
//		・モードレスダイアログをサポートする。
//		・ステータスバーを付加する。
//----------------------------------------------------------------------------------------------------
//  4. 履歴
//		2007.08.09 S.Aizawa 新規作成
//*****************************************************************************************************

#include "stdafx.h"
#include "MMA_G.h"
#include "DialogEx.h"


// CDialogEx ダイアログ

IMPLEMENT_DYNAMIC(CDialogEx, CDialog)

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::CDialogEx
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		UINT		nID				[I] ダイアログID
//		CWnd		*pParent		[I] 親ウィンドウへのポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CDialogEx::CDialogEx(UINT nID, CWnd *pParent)
	: CDialog(nID, pParent)
{
	// メンバ変数を初期化
	m_nID = nID;
	m_pParent = pParent;
	m_bModeless = FALSE;
	m_sizeDlg = 0;
	m_bStatusBar = FALSE;
	m_bSizeChange = FALSE;
}

void CDialogEx::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}


BEGIN_MESSAGE_MAP(CDialogEx, CDialog)
	ON_WM_SIZE()
	ON_MESSAGE(WM_EXITSIZEMOVE, OnExitSizeMove)
	ON_WM_GETMINMAXINFO()
END_MESSAGE_MAP()


//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::DoModeless
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		モードレスでダイアログを開く
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	TRUE：正常　FALSE：エラー
//*****************************************************************************************************
BOOL CDialogEx::DoModeless()
{
	// モードレスでウィンドウを作成
	if (!CDialog::Create(m_nID, m_pParent))
		return FALSE;

	// モードレスフラグセット
	m_bModeless = TRUE;

	// ウィンドウを表示
	ShowWindow(SW_SHOW);

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnInitDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダイアログ初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	TRUE
//*****************************************************************************************************
BOOL CDialogEx::OnInitDialog()
{
	CDialog::OnInitDialog();

	// ウィンドウサイズを保存
	CRect rect;
	GetClientRect(rect);
	m_sizeDlg = rect.Size();

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnCancel
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		キャンセルボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::OnCancel()
{
	if (m_bModeless)
		DestroyWindow();
	else
		EndDialog(IDCANCEL);
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnOK
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		OKボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::OnOK()
{
	// 何もしない
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::PostNcDestroy
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ウィンドウ破棄
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::PostNcDestroy()
{
	CDialog::PostNcDestroy();

	// モードレスなら自分自身を解放
	if (m_bModeless)
		delete this;
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::SetCtlPosition
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コントロール位置設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		UINT		nID				[I] コントロールID
//		double		fLeft			[I] 左位置
//		double		fTop			[I] 上位置
//		double		fRight			[I] 右位置
//		double		fBottom			[I] 下位置
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::SetCtlPosition(UINT nID, double fLeft, double fTop, double fRight, double fBottom)
{
	SetCtlPosition(GetDlgItem(nID), fLeft, fTop, fRight, fBottom);
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::SetCtlPosition
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コントロール位置設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CWnd		*pWnd			[I] コントロールのウィンドウポインタ
//		double		fLeft			[I] 左位置
//		double		fTop			[I] 上位置
//		double		fRight			[I] 右位置
//		double		fBottom			[I] 下位置
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::SetCtlPosition(CWnd *pWnd, double fLeft, double fTop, double fRight, double fBottom)
{
	HWND hWnd = pWnd->GetSafeHwnd();
	if (hWnd == NULL)
		return;

	// 設定情報を構造体に設定
	SDlgCtlPosition cDlgCtlPosition;
	cDlgCtlPosition.hWnd = hWnd;
	cDlgCtlPosition.fLeft = fLeft;
	cDlgCtlPosition.fTop = fTop;
	cDlgCtlPosition.fRight = fRight;
	cDlgCtlPosition.fBottom = fBottom;

	// 現在のウィンドウ位置を取得
	WINDOWPLACEMENT wp;
	pWnd->GetWindowPlacement(&wp);
	cDlgCtlPosition.rectCtl = wp.rcNormalPosition;

	int nSize = (int)m_aDlgCtlPosition.GetSize();
	for (int i = 0; i < nSize; i++) {
		if (m_aDlgCtlPosition[i].hWnd == hWnd) {
			// 配列に設定情報を上書き
			m_aDlgCtlPosition[i] = cDlgCtlPosition;
			return;
		}
	}

	// 配列に設定情報を追加
	m_aDlgCtlPosition.Add(cDlgCtlPosition);
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::SetAllCtlPosition
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		全コントロール位置設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		double		fLeft			[I] 左位置
//		double		fTop			[I] 上位置
//		double		fRight			[I] 右位置
//		double		fBottom			[I] 下位置
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::SetAllCtlPosition(double fLeft, double fTop, double fRight, double fBottom)
{
	CWnd *pWnd = GetTopWindow();
	while (pWnd != NULL) {
		SetCtlPosition(pWnd, fLeft, fTop, fRight, fBottom);
		pWnd = pWnd->GetNextWindow();
	}	
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnSize
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ウィンドウサイズ変更処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		UINT	nType			[I] サイズ変更のタイプ
//		int		cx				[I] ウィンドウの幅
//		int		cy				[I] ウィンドウの高さ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::OnSize(UINT nType, int cx, int cy)
{
	CDialog::OnSize(nType, cx, cy);

	// ステータスバーを再配置
	RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, 0);

	// ダイアログコントロールを適切な位置に再配置
	if (m_sizeDlg.cx && cx != 0) {
		// サイズの差分
		int nx = cx - m_sizeDlg.cx;
		int ny = cy - m_sizeDlg.cy;

		// 変更されたサイズ分ダイアログ内のコントロールの大きさと位置を変更する
		int nDlgCtlPosition = (int)m_aDlgCtlPosition.GetSize();
		for (int i = 0; i < nDlgCtlPosition; i++) {
			// 子ウィンドウを取得
			SDlgCtlPosition &cDlgCtlPosition = m_aDlgCtlPosition[i];
			CWnd *pWnd = FromHandle(m_aDlgCtlPosition[i].hWnd);

			// 子ウィンドウの位置、大きさを取得
			CRect rect(cDlgCtlPosition.rectCtl);

			// 位置と大きさを調整
			rect.left += (int)(nx * cDlgCtlPosition.fLeft);
			rect.top += (int)(ny * cDlgCtlPosition.fTop);
			rect.right += (int)(nx * cDlgCtlPosition.fRight);
			rect.bottom += (int)(ny * cDlgCtlPosition.fBottom);

			// 子ウィンドウを移動
			pWnd->SetWindowPos(NULL, rect.left, rect.top, rect.Width(), rect.Height(), SWP_NOZORDER);
		}

		// サイズ変更フラグON
		m_bSizeChange = TRUE;

		Invalidate(FALSE);

		UpdateWindow();
	}

	if (m_bStatusBar)
		RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, 0);
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnExitSizeMove
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ウィンドウサイズ変更、移動終了処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		WPARAM		wParam		[I] ウィンドウメッセージパラメータ
//		LPARAM		lParam		[I] ウィンドウメッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		0
//*****************************************************************************************************
LRESULT CDialogEx::OnExitSizeMove(WPARAM wParam, LPARAM lParam)
{
	// サイズ変更フラグがONならダイアログを再表示
	if (m_bSizeChange) {
		Invalidate();
		m_bSizeChange = FALSE;
	}

	return 0;
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::OnGetMinMaxInfo
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ウィンドウサイズ取得
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		MINMAXINFO		*lpMMI		[I] ウィンドウ最小化、最大化サイズ情報
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::OnGetMinMaxInfo(MINMAXINFO *lpMMI)
{
	// ウィンドウの最小サイズを設定
	if (m_sizeDlg.cx != 0) {
		lpMMI->ptMinTrackSize.x = m_sizeDlg.cx;
		lpMMI->ptMinTrackSize.y = m_sizeDlg.cy;
	}

	CDialog::OnGetMinMaxInfo(lpMMI);
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::CreateStatusBar
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ステータスバー作成
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::CreateStatusBar()
{
	if (m_wndStatusBar.Create(this)) {
		m_bStatusBar = TRUE;
		const UINT ind[2] = {0};

		m_wndStatusBar.SetIndicators(ind, 1);
		m_wndStatusBar.SetPaneInfo(0, 0, SBPS_STRETCH, 0);

		RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, 0);

		CRect rectStatusBar;
		m_wndStatusBar.GetWindowRect(rectStatusBar);

		CRect rectDialog;
		GetWindowRect(rectDialog);
		rectDialog.bottom += rectStatusBar.Height();
		MoveWindow(rectDialog, FALSE);

		// ウィンドウサイズを保存
		GetClientRect(rectDialog);
		m_sizeDlg = rectDialog.Size();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CDialogEx::SetStatusBar
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ステータスバーに文字列を表示
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		pText		[I] ステータスバーに表示する文字列
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CDialogEx::SetStatusBar(LPCTSTR pText)
{
	m_wndStatusBar.SetPaneText(0, pText);
}
