//*****************************************************************************************************
//  1. ファイル名
//		ConvMmeDlg.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		MME工学値変換ダイアログクラスの実装
//----------------------------------------------------------------------------------------------------
//  3. 備考
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 履歴
//		2013.10.22 S.Aizawa 新規作成
//*****************************************************************************************************

#include "stdafx.h"
#include "MMA_G.h"
#include "ConvMmeDlg.h"
#include "General.h"
#include "GlobalData.h"

// CConvMmeDlg ダイアログ

IMPLEMENT_DYNAMIC(CConvMmeDlg, CDialog)

CConvMmeDlg::CConvMmeDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CConvMmeDlg::IDD, pParent)
{
}

CConvMmeDlg::~CConvMmeDlg()
{
}

void CConvMmeDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_DATA_FOLDER, m_cEditDataFolder);
	DDX_Control(pDX, IDC_BUTTON_REF, m_cButtonRef);
	DDX_Control(pDX, IDC_BUTTON_CONV, m_cButtonConv);
	DDX_Control(pDX, IDCANCEL, m_cButtonCancel);
	DDX_Control(pDX, IDC_EDIT_START_TIME, m_cEditStartTime);
	DDX_Control(pDX, IDC_EDIT_END_TIME, m_cEditEndTime);
	DDX_Control(pDX, IDC_EDIT_MEAS_TIME, m_cEditMeasTime);
	DDX_Control(pDX, IDC_EDIT_DOWNLINK, m_cEditDownlink);
	DDX_Control(pDX, IDC_EDIT_COMMENT, m_cEditComment);
}


BEGIN_MESSAGE_MAP(CConvMmeDlg, CDialog)
	ON_BN_CLICKED(IDC_BUTTON_REF, &CConvMmeDlg::OnBnClickedButtonRef)
	ON_BN_CLICKED(IDC_BUTTON_CONV, &CConvMmeDlg::OnBnClickedButtonConv)
	ON_EN_UPDATE(IDC_EDIT_DOWNLINK, &CConvMmeDlg::OnEnUpdateEditDownlink)
END_MESSAGE_MAP()

// ツールチップ表示データ
static const SToolTipData s_aToolTip[] = {
	{IDC_BUTTON_REF, "ダウンリンクデータの存在するフォルダを選択するためのダイアログを開きます。"},
	{IDC_BUTTON_CONV, "設定された内容で、工学値変換を実行します。"},
	{IDCANCEL, "このダイアログを閉じます。"},
	{0, NULL}
};

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::ShowDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工学値変換ダイアログ表示
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CDocument	*pDoc		[I] ドキュメントクラスポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::ShowDialog(CDocument *pDoc)
{
	m_pDoc = pDoc;

	if (!m_oMmeFile.ReadIniFile())
		return;

	DoModal();
}

// CConvMmeDlg メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::OnInitDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダイアログ初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	TRUE
//*****************************************************************************************************
BOOL CConvMmeDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// ツールチップ表示設定
	CGeneral::SetToolTip(m_tooltip, s_aToolTip, this);

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::OnBnClickedButtonRef
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダウンリンクフォルダの参照ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::OnBnClickedButtonRef()
{
    BROWSEINFO bInfo;
    LPITEMIDLIST pIDList;
	char buf[_MAX_PATH];
    
	strcpy_s(buf, gDownlinkReferencePath);
    // BROWSEINFO構造体に値を設定
    bInfo.hwndOwner             = m_hWnd;		           // ダイアログの親ウインドウのハンドル
    bInfo.pidlRoot              = NULL;			           // ルートフォルダを示すITEMIDLISTのポインタ (NULLの場合デスクトップフォルダが使われます）
    bInfo.pszDisplayName        = buf;          // 選択されたフォルダ名を受け取るバッファのポインタ
    bInfo.lpszTitle             = "ダウンリンクファイル存在フォルダ指定";				   // ツリービューの上部に表示される文字列 
    bInfo.ulFlags               = BIF_RETURNONLYFSDIRS;    // 表示されるフォルダの種類を示すフラグ
    bInfo.lpfn                  = BrowseCallbackProc;      // BrowseCallbackProc関数のポインタ
    bInfo.lParam                = (LPARAM)buf;             // コールバック関数に渡す値
    
    // フォルダ選択ダイアログを表示
    pIDList = ::SHBrowseForFolder(&bInfo);
    if(pIDList != NULL){
        // ItemIDListをパス名に変換します
        if(!::SHGetPathFromIDList(pIDList, buf)){
            // エラー処理
        }

        // 最後にpIDListのポイントしているメモリを解放します
        ::CoTaskMemFree( pIDList );
		m_cEditDataFolder = buf;

		// .sファイルチェック処理
		if (!CheckDataFile(buf))
			m_cEditDataFolder = "";
    }

	// 変換ボタン有効化
	EnableConvButton();
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::BrowseCallbackProc
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		フォルダ選択ダイアログコールバック関数
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		HWND		hwnd		[I] ウィンドウハンドル
//		UINT		uMsg		[I] イベントメッセージ
//		LPARAM		lParam		[I] イベントパラメータ
//		LPARAM		lpData		[I] イベントデータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int		0
//*****************************************************************************************************
int CALLBACK CConvMmeDlg::BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData)
{
	if (uMsg == BFFM_INITIALIZED)
		::SendMessage(hwnd, BFFM_SETSELECTION, (WPARAM)TRUE, lpData);

	return 0;
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::CheckDataFile
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		選択したフォルダのチェック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		pDataFolder		[I] 選択したフォルダ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	TRUE：正常　FALSE:エラー
//*****************************************************************************************************
BOOL CConvMmeDlg::CheckDataFile(LPCTSTR pDataFolder)
{
	CTime oStartTime, oEndTime;
	int nMeasTime;

	if (m_oMmeFile.CheckDataFile(pDataFolder, oStartTime, oEndTime, nMeasTime)) {
		// 開始時刻表示
		m_cEditStartTime = oStartTime.FormatGmt("%Y/%m/%d %H:%M:%S");

		// 終了時刻表示
		m_cEditEndTime = oEndTime.FormatGmt("%Y/%m/%d %H:%M:%S");

		// 計測時間表示
		CString sMeasTime;
		sMeasTime.Format("%dhours  %02dmin  %02dsec", nMeasTime / 3600, nMeasTime / 60 % 60, nMeasTime % 60);
		m_cEditMeasTime = sMeasTime;

		// ダウンリンク日表示
		// 開始時刻の日付をデフォルトで表示する
		m_cEditDownlink = oStartTime.FormatGmt("%Y/%m/%d");

		return TRUE;
	} else
		return FALSE;
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::OnBnClickedButtonConv
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工学値変換ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::OnBnClickedButtonConv()
{
	// 変換済みファイル存在チェック
	if (m_oMmeFile.m_bOverWrite) {
		if (AfxMessageBox("この変換データは既に存在します。このまま変換処理を行うと，既存データが上書きされます。\n変換処理を継続しますか？",MB_ICONQUESTION|MB_YESNO) == IDNO)
			return;
	}

	// 実行確認
	if (AfxMessageBox("変換処理を実行しますか？", MB_YESNO) != IDYES)
		return;

	// 入力データセット
	m_oMmeFile.m_sDownlink = m_cEditDownlink;
	m_oMmeFile.m_sComment = m_cEditComment;

	// ボタンを無効にする
	KeyOff();

	// 工学値変換処理
	BOOL nResult = m_oMmeFile.ConvDataFile();

	// ビューを更新
	m_pDoc->UpdateAllViews(NULL);

	if (nResult) {
		// 変換終了メッセージ表示
		AfxMessageBox("工学値変換が終了しました", MB_ICONINFORMATION | MB_OK);
	} else {
		// 変換中止メッセージ表示
		AfxMessageBox("工学値変換を中止しました", MB_ICONINFORMATION | MB_OK);
	}

	// ボタンを有効にする
	KeyOn();
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::OnOK
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		OKボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::OnOK()
{
	// 何もしない（Enterキーで閉じないようにする）
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::KeyOff
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		処理中にボタンをGRAYにする
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::KeyOff(void)
{
	m_cButtonConv.EnableWindow(FALSE);
	m_cButtonCancel.EnableWindow(FALSE);
	m_cButtonRef.EnableWindow(FALSE);
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::KeyOn
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンのGRAYを解除する
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::KeyOn(void)
{
	EnableConvButton();
	m_cButtonCancel.EnableWindow(TRUE);
	m_cButtonRef.EnableWindow(TRUE);
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::EnableConvButton
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工学値変換ボタンの有効／無効を設定する
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::EnableConvButton()
{
	BOOL bEnable = TRUE;

	// データフォルダ入力チェック
	if (m_cEditDataFolder.IsEmpty())
		bEnable = FALSE;

	// ダウンリンク日入力チェック
	if (m_cEditDownlink.IsEmpty())
		bEnable = FALSE;

	// 変換ボタンを有効／無効に設定
	m_cButtonConv.EnableWindow(bEnable);
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::OnEnUpdateEditDownlink
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダウンリンク日の入力処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CConvMmeDlg::OnEnUpdateEditDownlink()
{
	EnableConvButton();
}

//*****************************************************************************************************
//  1. 関数名
//		CConvMmeDlg::PreTranslateMessage
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ウィンドウメッセージ処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		MSG*	pMsg			[I] MSG構造体へのポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	親クラスの返値をそのまま返す
//*****************************************************************************************************
BOOL CConvMmeDlg::PreTranslateMessage(MSG* pMsg)
{
	// ツールチップを表示するための処理
	switch(pMsg->message){
	case WM_LBUTTONDOWN:            
	case WM_LBUTTONUP:              
	case WM_MOUSEMOVE:
		if (m_tooltip.m_hWnd)
			m_tooltip.RelayEvent(pMsg);
		break;
	}

	return CDialog::PreTranslateMessage(pMsg);
}
