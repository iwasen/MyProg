//*****************************************************************************************************
//  1. ファイル名
//		ManualBunkatsuDlg.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		CManualBunkatsuDlg クラスのインプリメンテーション
//----------------------------------------------------------------------------------------------------
//  3. 備考
//----------------------------------------------------------------------------------------------------
//  4. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************

#include "stdafx.h"
#include "workscheduler.h"
#include "DataManager.h"

#include "MenuDispCtrl.h"

#include "ManualBunkatsuDlg001.h"
#include "ManualBunkatsuDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

// 表示モード
#define MODE_NONE			0	// 表示無し
#define MODE_KOTEI			1	// 工程表示
#define MODE_YOSO_SAGYOGUN	2	// 要素作業群表示
#define MODE_YOSO_SAGYO		3	// 要素作業表示

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::CManualBunkatsuDlg
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CWnd		*pParent			[I] 親ウィンドウ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		クラス変数を初期化する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
CManualBunkatsuDlg::CManualBunkatsuDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CManualBunkatsuDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CManualBunkatsuDlg)
	//}}AFX_DATA_INIT

	// クラス変数初期化
	m_nMode = MODE_NONE;
	m_nKishuId = -1;
	m_nSagyoshaId = -1;
	m_bPreview = FALSE;
}


void CManualBunkatsuDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CManualBunkatsuDlg)
	DDX_Control(pDX, IDC_BUTTON_PREVIEW, m_cButtonPreview);
	DDX_Control(pDX, IDC_BUTTON_SETTEI, m_cButtonSettei);
	DDX_Control(pDX, IDC_BUTTON_RIGHT_MOVE, m_cButtonRightMove);
	DDX_Control(pDX, IDC_BUTTON_LEFT_MOVE, m_cButtonLeftMove);
	DDX_Control(pDX, IDC_STATIC_TOTAL_TIME2, m_cStaticTotalTime2);
	DDX_Control(pDX, IDC_STATIC_TOTAL_TIME1, m_cStaticTotalTime1);
	DDX_Control(pDX, IDC_COMBO_YOSO_SAGYOGUN, m_cComboYosoSagyogun);
	DDX_Control(pDX, IDC_COMBO_KOTEI, m_cComboKotei);
	DDX_Control(pDX, IDC_COMBO_SAGYOSHA, m_cComboSagyosha);
	DDX_Control(pDX, IDC_LIST2, m_cList2);
	DDX_Control(pDX, IDC_LIST1, m_cList1);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CManualBunkatsuDlg, CDialogEx)
	//{{AFX_MSG_MAP(CManualBunkatsuDlg)
	ON_BN_CLICKED(IDC_BUTTON_LEFT_MOVE, OnButtonLeftMove)
	ON_BN_CLICKED(IDC_BUTTON_RIGHT_MOVE, OnButtonRightMove)
	ON_BN_CLICKED(IDC_BUTTON_SETTEI, OnButtonSettei)
	ON_CBN_SELCHANGE(IDC_COMBO_SAGYOSHA, OnSelchangeComboSagyosha)
	ON_CBN_SELCHANGE(IDC_COMBO_KOTEI, OnSelchangeComboKotei)
	ON_CBN_SELCHANGE(IDC_COMBO_YOSO_SAGYOGUN, OnSelchangeComboYosoSagyogun)
	ON_BN_CLICKED(IDC_BUTTON_PREVIEW, OnButtonPreview)
	ON_NOTIFY(NM_CLICK, IDC_LIST1, OnClickList1)
	ON_NOTIFY(LVN_ITEMCHANGED, IDC_LIST1, OnItemchangedList1)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnInitDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダイアログ初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		TRUE
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		各コンボボックスを初期化する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CManualBunkatsuDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

// Modify ... ( ADD )
	g_pSystem->m_cMenuDisp.SetMenuText( this, Menu_ManualBunkatsuDlg );
// By Y.Itabashi (xxxxx) 2007.01.26

	SetLixxxolumn(m_cList1);
	SetLixxxolumn(m_cList2);

// Modify ... ( CHANGE )
	m_cList1.SetExtendedStyle( LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES );
	m_cList2.SetExtendedStyle( LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES );
//	m_cList1.SetExtendedStyle(LVS_EX_FULLROWSELECT);
//	m_cList2.SetExtendedStyle(LVS_EX_FULLROWSELECT);
// By Y.Itabashi (xxxxx) 2007.02.19

	// 作業者コンボボックスを設定
	SetSagyoshaList();
/*
	// 作業者、工程、要素作業群が指定されていたらそれを表示
	if (m_nSagyoshaId != -1) {
		if (CGlobal::SelectComboBox(m_cComboSagyosha, m_nSagyoshaId)) {
			m_nMode = MODE_KOTEI;
			SetKoteiList();
			if (!m_sKoteiName.IsEmpty()) {
				if (CGlobal::SelectComboBox(m_cComboKotei, m_sKoteiName)) {
					m_nMode = MODE_YOSO_SAGYOGUN;
					SetYosoSagyogunList();
					if (!m_sYosoSagyogunName.IsEmpty()) {
						if (CGlobal::SelectComboBox(m_cComboYosoSagyogun, m_sYosoSagyogunName)) {
							m_nMode = MODE_YOSO_SAGYO;
							SetYosoSagyoList();
						}
					}
				}
			}
		}
	}
*/

// Modify ... ( ADD )
	// 機種名を表示
	if (m_nKishuId != -1){
		CEdit *pEdit = (CEdit *)GetDlgItem( IDC_EDIT_KISHU_NAME );
		pEdit->SetWindowText( g_pDataManager->GetKishuData(m_nKishuId)->sKishuName );
	}
// By Y.Itabashi (xxxxx) 2007.02.28

	// ボタンを有効化
	EnableButtons();

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnSelchangeComboSagyosha
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		作業者コンボボックス選択変更処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		工程コンボボックス、リストボックスを設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnSelchangeComboSagyosha()
{
	// 工程モードにセット
	m_nMode = MODE_KOTEI;

	// コンボボックス、リストボックス設定処理
	SetComboList();

	// ボタンを有効化
	EnableButtons();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnSelchangeComboKotei
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工程コンボボックス選択変更処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		要素作業群コンボボックス、リストボックスを設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnSelchangeComboKotei()
{
	// 要素作業群モードにセット
	m_nMode = MODE_YOSO_SAGYOGUN;

	// コンボボックス、リストボックス設定処理
	SetComboList();

	// ボタンを有効化
	EnableButtons();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnSelchangeComboYosoSagyogun
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		要素作業群コンボボックス選択変更処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		要素作業コンボボックス、リストボックスを設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnSelchangeComboYosoSagyogun()
{
	// 要素作業群モードに設定
	m_nMode = MODE_YOSO_SAGYO;

	// コンボボックス、リストボックス設定処理
	SetComboList();

	// ボタンを有効化
	EnableButtons();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnButtonRightMove
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		右移動ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		左側のリストボックスから右側のリストボックスへ選択されている項目を移動する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnButtonRightMove()
{
	// リストボックスの選択されている項目を移動
	MoveListBox(m_cList1, m_cList2);

	// ボタンを有効化
	EnableButtons();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnButtonLeftMove
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		左移動ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		右側のリストボックスから左側のリストボックスへ選択されている項目を移動する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnButtonLeftMove()
{
	// リストボックスの選択されている項目を移動
	MoveListBox(m_cList2, m_cList1);

	// ボタンを有効化
	EnableButtons();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnButtonSettei
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		設定ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		分割を実行して、ダイアログを閉じる。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnButtonSettei()
{
	// リストデータチェック
	if (!ListDataCheck())
		return;

	// 分割実行
	ExecBunkatsuSakujo();

	// データ更新フラグ設定
	g_pDataManager->SetUpdate();

	EndDialog(IDOK);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnButtonPreview
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		プレビューボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		現在のデータをバックアップした後、分割を実行してグラフ表示を更新する。その後バックアップ
//		したデータを戻す。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnButtonPreview()
{
	// リストデータチェック
	if (!ListDataCheck())
		return;

	// 分割実行
	ExecBunkatsuSakujo();

	// グラフ表示を更新
	SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(m_cComboSagyosha.GetCurSel())];
	m_pDoc->DispCenterSagyosha(cSagyoshaList.nSublineId, cSagyoshaList.nSagyoshaId);

	// Undoバッファから復元
	g_pDataManager->RestoreUndoData();
	m_pDoc->MakeGraphData();

	m_bPreview = TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::OnCancel
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		キャンセルボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ダイアログを閉じる。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::OnCancel()
{
	// プレビューしていたら戻ったときに画面を更新する
	EndDialog(IDCANCEL);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::ExecBunkatsuSakujo
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		分割・処理実行
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		現在の表示モードにより、工程または要素作業群分割または要素作業分割を実行する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::ExecBunkatsuSakujo()
{
	// 現在の表示モードにより分割処理を実行
	switch (m_nMode) {
	case MODE_YOSO_SAGYOGUN:
		// 工程分割
		KoteiBunkatsu();
		break;
	case MODE_YOSO_SAGYO:
		// 要素作業群分割
		YosoSagyogunBunkatsu();
		break;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::KoteiBunkatsu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工程分割処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		工程を左右の要素作業群に分割する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::KoteiBunkatsu()
{
	CStringArray aBunkatsuYosoSagyogun;

	// 右側のリストボックスにある要素作業群を分割
	int nSize = m_cList2.GetItemCount();
	if (nSize > 0) {
		SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(m_cComboSagyosha.GetCurSel())];

		// コンボボックスから工程名を取得
		CString sKoteiName;
		m_cComboKotei.GetWindowText(sKoteiName);

		// リストボックスから分割する要素作業群名を取得
		for (int i = 0; i < nSize; i++) {
			SListData *pListData = (SListData *)m_cList2.GetItemData(i);
			aBunkatsuYosoSagyogun.Add(pListData->sName);
		}

		// 要素作業群分割処理実行
		g_pDataManager->KoteiBunkatsu(cSagyoshaList.nSublineId, sKoteiName, aBunkatsuYosoSagyogun);
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::YosoSagyogunBunkatsu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		要素作業群処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		要素作業群を左右の要素作業に分割する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::YosoSagyogunBunkatsu()
{
	CIntArrayEx aYosoSagyoIndex;

	// 右側のリストボックスにある要素作業を処理
	int nSize = m_cList2.GetItemCount();
	if (nSize > 0) {
		SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(m_cComboSagyosha.GetCurSel())];

		// コンボボックスから工程名を取得
		CString sKoteiName;
		m_cComboKotei.GetWindowText(sKoteiName);

		// コンボボックスから要素作業群名を取得
		CString sYosoSagyogunName;
		m_cComboYosoSagyogun.GetWindowText(sYosoSagyogunName);

		// リストボックスから分割する要素作業を取得
// Modify ... ( CHANGE )
		CLixxxtrl *pList;
		SListData *pListData1 = (SListData *)m_cList1.GetItemData(0);
		SListData *pListData2 = (SListData *)m_cList2.GetItemData(0);
		if( pListData1->nId == 0 )
			pList = &m_cList2;
		else
			pList = &m_cList1;
		for (int i = 0; i < pList->GetItemCount(); i++) {
			SListData *pListData = (SListData *)pList->GetItemData(i);
			aYosoSagyoIndex.Add(pListData->nId);
		}
/*		for (int i = 0; i < nSize; i++) {
			SListData *pListData = (SListData *)m_cList2.GetItemData(i);
			aYosoSagyoIndex.Add(pListData->nId);
		}*/
// By Y.Itabashi (xxxxx) 2007.02.10

		// 要素作業分割
		g_pDataManager->YosoSagyogunBunkatsu(cSagyoshaList.nSublineId, sKoteiName, sYosoSagyogunName, aYosoSagyoIndex);
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetSagyoshaList
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		作業者リスト設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		コンボボックスに作業者を設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetSagyoshaList()
{
	int nIndex;

	int nSublineNum = g_pDataManager->GetSublineNum();
	for (int nSublineId = 0; nSublineId < nSublineNum; nSublineId++) {
		SSubline *pSubline = g_pDataManager->GetSublineData(nSublineId);

		if (pSubline->bManualEditFlag) {
			// コンボボックスに作業者を設定
			int nSagyoshNum = g_pDataManager->GetSagyoshaNum(nSublineId);
			for (int nSagyoshId = 0; nSagyoshId < nSagyoshNum; nSagyoshId++) {
				SSagyoshaList *pSagyoshaList = m_aSagyoshaList.AddElement(nIndex);
				pSagyoshaList->nSublineId = nSublineId;
				pSagyoshaList->nSagyoshaId = nSagyoshId;

				m_cComboSagyosha.SetItemData(m_cComboSagyosha.AddString(g_pDataManager->GetSagyoshaName(nSublineId, nSagyoshId)), nIndex);
			}
		}
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetComboList
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンボボックス、リストボックス設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		現在の表示モードによりリストボックスに工程または要素作業群または要素作業をセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetComboList()
{
	switch (m_nMode) {
	case MODE_KOTEI:
		// 工程リスト設定
		SetKoteiList();
		break;
	case MODE_YOSO_SAGYOGUN:
		// 要素作業群リスト設定
		SetYosoSagyogunList();
		break;
	case MODE_YOSO_SAGYO:
		// 要素作業リスト設定
		SetYosoSagyoList();
		break;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetKoteiList
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		工程リスト設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		リストボックスに工程をセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetKoteiList()
{
	int i;

	// コンボボックスから作業者を取得
	int nIndex = m_cComboSagyosha.GetCurSel();
	if (nIndex == -1)
		return;

	SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(nIndex)];

	// コンボボックス、リストボックスをクリア
	m_aListData.RemoveAll();
	m_cComboKotei.ResetContent();
	m_cComboYosoSagyogun.ResetContent();
	m_cList1.DeleteAllItems();
	m_cList2.DeleteAllItems();

	int nId = 0;
	SGraphSubline *pGraphSubline = m_pDoc->GetGraphSublineData(cSagyoshaList.nSublineId);
	CGraphBlockArray &aGraphBlock = pGraphSubline->aGraphSagyosha[cSagyoshaList.nSagyoshaId].aKotei;
	int nSize = aGraphBlock.GetSize();
	for (i = 0; i < nSize; i++) {
		SGraphBlock &cGraphBlock = aGraphBlock[i];

		if (m_nKishuId == -1 || m_nKishuId == cGraphBlock.nKishuId) {
			SListData *pListData = m_aListData.AddElement();
			pListData->sName = cGraphBlock.sKoteiName;
			pListData->fTime = cGraphBlock.fTime;
			pListData->pGraphBlock = &cGraphBlock;
			pListData->nId = nId++;
		}
	}
	
	// コンボボックスにセット
	SetComboBox(m_cComboKotei);

// Modify ... ( CHANGE )
	// リストボックスにセット
//	SetListBox();
// By Y.Itabashi (xxxxx) 2007.02.10

	// 合計時間を表示
	DispTotalTimeAll();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetYosoSagyogunList
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		要素作業群リスト設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		リストボックスに要素作業群をセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetYosoSagyogunList()
{
	int i;

	// コンボボックスから作業者を取得
	int nIndexId = m_cComboSagyosha.GetCurSel();
	if (nIndexId == -1)
		return;

	SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(nIndexId)];

	// コンボボックスから工程を取得
	CString sKoteiName;
	m_cComboKotei.GetWindowText(sKoteiName);

	// コンボボックス、リストボックスをクリア
	m_aListData.RemoveAll();
	m_cComboYosoSagyogun.ResetContent();
	m_cList1.DeleteAllItems();
	m_cList2.DeleteAllItems();

	int nId = 0;
	SGraphSubline *pGraphSubline = m_pDoc->GetGraphSublineData(cSagyoshaList.nSublineId);
	CGraphBlockArray &aGraphBlock = pGraphSubline->aGraphSagyosha[cSagyoshaList.nSagyoshaId].aYosoSagyogun;
	int nSize = aGraphBlock.GetSize();
	for (i = 0; i < nSize; i++) {
		SGraphBlock &cGraphBlock = aGraphBlock[i];

		if (cGraphBlock.sKoteiName == sKoteiName && (m_nKishuId == -1 || m_nKishuId == cGraphBlock.nKishuId)) {
			SListData *pListData = m_aListData.AddElement();
			pListData->sName = cGraphBlock.sYosoSagyogunName;
			pListData->fTime = cGraphBlock.fTime;
			pListData->pGraphBlock = &cGraphBlock;
			pListData->nId = nId++;
		}
	}

	// コンボボックスにセット
	SetComboBox(m_cComboYosoSagyogun);

// Modify ... ( CHANGE )
	// リストボックスにセット
//	SetListBox();
// By Y.Itabashi (xxxxx) 2007.02.10

	// 合計時間を表示
	DispTotalTimeAll();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetYosoSagyoList
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		要素作業リスト設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		リストボックスに要素作業をセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetYosoSagyoList()
{
	int i;

	// コンボボックスから作業者を取得
	int nIndexId = m_cComboSagyosha.GetCurSel();
	if (nIndexId == -1)
		return;

	SSagyoshaList &cSagyoshaList = m_aSagyoshaList[m_cComboSagyosha.GetItemData(nIndexId)];

	// コンボボックスから工程を取得
	CString sKoteiName;
	m_cComboKotei.GetWindowText(sKoteiName);

	// コンボボックスから要素作業群を取得
	CString sYosoSagyogunName;
	m_cComboYosoSagyogun.GetWindowText(sYosoSagyogunName);

	// コンボボックス、リストボックスをクリア
	m_aListData.RemoveAll();
	m_cList1.DeleteAllItems();
	m_cList2.DeleteAllItems();

	// 選択されている工程、要素作業群の要素作業を集める
	m_pYosoSagyogun = g_pDataManager->GetYosoSagyogun(cSagyoshaList.nSublineId, sKoteiName, sYosoSagyogunName);
	if (m_pYosoSagyogun != NULL) {
		int nSize = m_pYosoSagyogun->aYosoSagyo.GetSize();
		for (i = 0; i < nSize; i++) {
			SYosoSagyo &cYosoSagyo = m_pYosoSagyogun->aYosoSagyo[i];
			if (cYosoSagyo.sDeleteFlag.IsEmpty()) {
				SListData *pListData = m_aListData.AddElement();
// Modify ... ( ADD )
				pListData->nSagyoNo = cYosoSagyo.nSagyoNo;
// By Y.Itabashi (xxxxx) 2007.02.19
				pListData->sName = cYosoSagyo.sYosoSagyoName;
				pListData->fTime = cYosoSagyo.fTime;
				pListData->nId = i;
			}
		}
	}

	// リストボックスにセット
	SetListBox();

	// 合計時間を表示
	DispTotalTimeAll();
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetComboBox
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンボボックス設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CComboBox		&cComboBox		[O] コンボボックス
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		m_aListDataの内容を指定されたコンボボックスにセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetComboBox(CComboBox &cComboBox)
{
	CString sText;
	int nSize = m_aListData.GetSize();
	for (int i = 0; i < nSize; i++)
		cComboBox.AddString(m_aListData[i].sName);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::SetListBox
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		リストボックス設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		m_aListDataの内容をリストボックスにセットする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::SetListBox()
{
	CString sText;
	int nSize = m_aListData.GetSize();
	for (int i = 0; i < nSize; i++) {
		SListData &cListData = m_aListData[i];

// Modify ... ( ADD )
		sText.Format("%d", cListData.nSagyoNo );
		m_cList1.InsertItem(i, sText );
		sText.Format("%.6f", cListData.fTime);
		m_cList1.SetItemText(i, 1, cListData.sName);
		m_cList1.SetItemText(i, 2, sText);
//		m_cList1.InsertItem(i, cListData.sName);
//		m_cList1.SetItemText(i, 1, sText);
// By Y.Itabashi (xxxxx) 2007.02.19
		m_cList1.SetItemData(i, (DWORD)&cListData);
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::DispTotalTimeAll
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		合計時間表示処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		左右のリストボックスの合計時間を表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::DispTotalTimeAll()
{
	// 左側のリストボックスの合計時間を表示
	DispTotalTime(CalcTotalTime(m_cList1), m_cStaticTotalTime1);

	// 右側のリストボックスの合計時間を表示
	DispTotalTime(CalcTotalTime(m_cList2), m_cStaticTotalTime2);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::DispTotalTime
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		合計時間表示処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		double		fTime			[I] 合計時間
//		CStatic		&cStatic		[O] スタティックコントロール
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		指定されたスタティックコントロールに指定された合計時間を表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::DispTotalTime(double fTime, CStatic &cStatic)
{
	CString sText;

// Modify ... ( CHANGE )
	CString str = g_pSystem->m_cMenuDisp.GetMenu( Menu_ManualBunkatsuDlg[7].MenuNo, Menu_ManualBunkatsuDlg[7].ItemNo );
	sText.Format("%s%.3f", str, fTime);
//	sText.Format("合計時間：%.3f", fTime);
// By Y.Itabashi (xxxxx) 2007.01.26
	cStatic.SetWindowText(sText);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::CalcTotalTime
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		合計時間計算
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CLixxxtrlEx1	&cList			[I] リストボックス
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		double		合計時間
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		指定されたリストボックス内の合計時間を計算する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
double CManualBunkatsuDlg::CalcTotalTime(CLixxxtrlEx1 &cList)
{
	double fTime = 0;

	// リストボックス内の作業時間を合計
	int nSize = cList.GetItemCount();
	for (int i = 0; i < nSize; i++) {
		SListData *pListData = (SListData *)cList.GetItemData(i);
		fTime += pListData->fTime;
	}

	return fTime;
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::EnableButtons
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタン有効化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ボタンの有効／無効を設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::EnableButtons()
{
	m_cButtonRightMove.EnableWindow(m_cComboKotei.GetCurSel() != -1 && m_cList1.GetItemCount() != 0);
	m_cButtonLeftMove.EnableWindow(m_cList2.GetItemCount() != 0);
}

//*****************************************************************************************************
//  1. 関数名
//		CManualBunkatsuDlg::MoveListBox
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		左のリストボックスから右のリストボックスに移動
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		左のリストボックスから右のリストボックスに選択されている項目を移動する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CManualBunkatsuDlg::MoveListBox(CLixxxtrlEx1 &cListFrom, CLixxxtrlEx1 &cListTo)
{
	int nColumn = cListFrom.GetHeaderCtrl()->GetItemCount();
	int nInsertIndex;
	int i, j;
	CString sText;

// Modify ... ( ADD )
	if( cListFrom.GetSelectedCount() == 0 ){
		g_pSystem->DispMessage("E016003");
			return;
	}
// By Y.Itabashi (xxxxx) 2007.02.19

	for (i = 0; i < cListFrom.GetItemCount(); i++) {
		if (cListFrom.GetItemState(i, LVIS_SELECTED)) {
			int nDeleteIndex = i;
			SListData *pListDataFrom = (SListData *)cListFrom.GetItemData(nDeleteIndex);
			for (j = 0; j < nColumn; j++) {
				sText = cListFrom.GetItemText(nDeleteIndex, j);

				if (j == 0) {
					int nCount = cListTo.GetItemCount();
					for (nInsertIndex = 0; nInsertIndex < nCount; nInsertIndex++) {
						SListData *pListDataTo = (SListData *)cListTo.GetItemData(nInsertIndex);
						if (pListDataTo->nId > pListDataFrom->nId)
							break;
					}
						
					cListTo.InsertItem(nInsertIndex, sText);
					i--;
				} else
					cListTo.SetItemText(nInsertIndex, j, sText);
			}

			cListTo.SetItemState(nInsertIndex, LVIS_SELECTED, LVIS_SELECTED);
			cListTo.SetItemData(nInsertIndex, cListFrom.GetItemData(nDeleteIndex));

			cListFrom.DeleteItem(nDeleteIndex);
		}
	}

	// 合計時間を表示
	DispTotalTimeAll();
}

void CManualBunkatsuDlg::SetLixxxolumn(CLixxxtrlEx1 &cList)
{
	cList.EnableScrollBarCtrl(SB_VERT, TRUE);

	CRect rect;
	cList.GetClientRect(rect);


// Modify ... ( CHANGE )
	CString str = g_pSystem->m_cMenuDisp.GetMenu( Menu_ManualBunkatsuDlg[4].MenuNo, Menu_ManualBunkatsuDlg[4].ItemNo );
	cList.InsertColumn(0, str, LVCFMT_RIGHT, rect.Width() / 6);
	str = g_pSystem->m_cMenuDisp.GetMenu( Menu_ManualBunkatsuDlg[5].MenuNo, Menu_ManualBunkatsuDlg[5].ItemNo );
	cList.InsertColumn(1, str, LVCFMT_LEFT, rect.Width() * 4 / 6);
	str = g_pSystem->m_cMenuDisp.GetMenu( Menu_ManualBunkatsuDlg[6].MenuNo, Menu_ManualBunkatsuDlg[6].ItemNo );
	cList.InsertColumn(2, str, LVCFMT_RIGHT, rect.Width() / 6);
//	cList.InsertColumn(0, "工程", LVCFMT_LEFT, rect.Width() * 4 / 5);
//	cList.InsertColumn(1, "作業時間", LVCFMT_RIGHT, rect.Width() / 5);
// By Y.Itabashi (xxxxx) 2007.02.19
}

void CManualBunkatsuDlg::OnClickList1(NMHDR* pNMHDR, LRESULT* pResult) 
{
	// TODO: この位置にコントロール通知ハンドラ用のコードを追加してください
	
	*pResult = 0;
}

void CManualBunkatsuDlg::OnItemchangedList1(NMHDR* pNMHDR, LRESULT* pResult) 
{
	NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;
	// TODO: この位置にコントロール通知ハンドラ用のコードを追加してください
	
	*pResult = 0;
}

// リストボックスのデータをチェック
BOOL CManualBunkatsuDlg::ListDataCheck()
{
	int nCount1 = m_cList1.GetItemCount();
	int nCount2 = m_cList2.GetItemCount();

	if (nCount1 == 0 || nCount2 == 0) {
		g_pSystem->DispMessage("E016001");
		return FALSE;
	}

	BOOL bFlag1 = FALSE;
	BOOL bFlag2 = FALSE;
	SListData *pListData1, *pListData2;
	for (int i = 0; i < nCount1; i++) {
		pListData1 = (SListData *)m_cList1.GetItemData(i);
		for (int j = 0; j < nCount2; j++) {
			pListData2 = (SListData *)m_cList2.GetItemData(j);
			if (pListData1->nId < pListData2->nId) {
				if (bFlag2) {
					g_pSystem->DispMessage("E016002");
					return FALSE;
				}
				bFlag1 = TRUE;
			} else {
				if (bFlag1) {
					g_pSystem->DispMessage("E016002");
					return FALSE;
				}
				bFlag2 = TRUE;
			}
		}
	}

	return TRUE;
}
