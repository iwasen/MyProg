//*****************************************************************************************************
//  1. ファイル名
//		ExcelLib.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		CExcelLib,CWorksheet,CExcelData クラスのインプリメンテーション
//----------------------------------------------------------------------------------------------------
//  3. 備考
//----------------------------------------------------------------------------------------------------
//  4. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************

#include "stdafx.h"
#include "ExcelLib.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

using namespace Excel;

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::CExcelLib
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		CExcelLibクラスコンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		メンバ変数の初期化を行う。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
CExcelLib::CExcelLib()
{
	m_pExcel = NULL;
	m_pBooks = NULL;
	m_pBook = NULL;
	m_pSheets = NULL;
	m_nErrorCode = 0;
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::~CExcelLib
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		CExcelLibクラスデストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		使用しているオブジェクトを解放する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
CExcelLib::~CExcelLib()
{
	Close();
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::Open
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイルオープン
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		pFileName		[I] エクセルファイル名
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		TRUE:正常，FALSE:エラー
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		指定されたエクセルファイルをオープンする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CExcelLib::Open(LPCTSTR pFileName)
{
	if (!Initialize())
		return FALSE;

	TCHAR szFullPath[MAX_PATH];
	if (_fullpath(szFullPath, pFileName, sizeof(szFullPath)) != NULL)
		pFileName = szFullPath;

	try {
		m_pBook = m_pBooks->Open(pFileName);
		m_pSheets = m_pBook->GetWorksheets();
	} catch (_com_error &e) {
		ErrorProc(e);
		return FALSE;
	}

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::New
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイル新規作成
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		TRUE:正常，FALSE:エラー
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		エクセルファイルを新規作成する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CExcelLib::New()
{
	if (!Initialize())
		return FALSE;

	try {
		m_pBook = m_pBooks->Add();
		m_pSheets = m_pBook->GetWorksheets();
	} catch (_com_error &e) {
		ErrorProc(e);
		return FALSE;
	}

	return TRUE;
}

BOOL CExcelLib::Exec(CStringArray &aPathName)
{
	if (!Initialize())
		return FALSE;

	try {
		CString sCaptionOrg = (LPCTSTR)m_pExcel->Caption;
		CString sCaptionTmp;
		sCaptionTmp.Format("%d", ::GetTickCount());
		m_pExcel->Caption = (LPCTSTR)sCaptionTmp;

		HWND hWnd;
		hWnd = ::FindWindow("XLMain", sCaptionTmp);
		if(NULL == hWnd)
			return FALSE;

		m_pExcel->Caption = (LPCTSTR)sCaptionOrg;

		int nSize = aPathName.GetSize();
		for (int i= 0; i < nSize; i++)
			m_pBooks->Open((LPCTSTR)aPathName[i]);

		m_pExcel->Visible = true;
		m_pExcel->DisplayAlerts = true;
		Close(FALSE);

		DWORD pid;  // Variable to hold the process ID.
		if (GetWindowThreadProcessId(hWnd, &pid) == 0)
			return FALSE;

		HANDLE hProcess;
		hProcess = OpenProcess(SYNCHRONIZE | PROCESS_ALL_ACCESS, TRUE, pid);
		if (hProcess == NULL)
			return FALSE;

		WaitForSingleObject(hProcess, INFINITE);

		CloseHandle(hProcess);

		return TRUE;
	} catch (...) {
		return FALSE;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::Initialize
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		TRUE:正常，FALSE:エラー
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		各オブジェクトを生成する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CExcelLib::Initialize()
{
	Close();

	try {
		m_pExcel.CreateInstance("Excel.Application");
		m_pBooks = m_pExcel->GetWorkbooks();
		m_pExcel->PutSheetsInNewWorkbook(1);
		m_pExcel->DisplayAlerts = false;
	} catch (_com_error &e) {
		ErrorProc(e);
		return FALSE;
	}

	return TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::ReleaseAll
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		オブジェクト解放処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		各オブジェクトを解放する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelLib::Close(BOOL bQuit)
{
	if (m_pSheets != NULL) {
		m_pSheets.Release();
		m_pSheets = NULL;
	}

	if (m_pBook != NULL) {
		m_pBook.Release();
		m_pBook = NULL;
	}

	if (m_pBooks != NULL) {
		m_pBooks.Release();
		m_pBooks = NULL;
	}

	if (m_pExcel != NULL) {
		if (bQuit) {
			try {
				m_pExcel->Quit();
			} catch (...) {
			}
		}
		m_pExcel.Release();
		m_pExcel = NULL;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelLib::ErrorProc
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エラー処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		_com_error		&e		[I] COM例外オブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		COM例外オブジェクトからエラーコード、エラーメッセージを取り出し、保存する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.01.31 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelLib::ErrorProc(_com_error &e)
{
	m_nErrorCode = e.WCode();
	m_sErrorMsg = (LPCTSTR)e.Description();
}

CExcelData::CExcelData()
{
	AddSheet("Sheet1");
	m_nCurrentSheetNo = 0;
}

void CExcelData::AddSheet(LPCTSTR pSheetName)
{
	SSheet *pSheet = m_aSheet.AddElement(pSheetName);

	pSheet->sSheetName = pSheetName;
	pSheet->nUsedCols = 0;
	pSheet->nUsedRows = 0;
	pSheet->nAllocRows = 0;
// Modify ... ( ADD )
	pSheet->bDeleteFlag = false;
// By Y.itabashi (xxxxx) 2007.02.19
}

// Modify ... ( ADD )
void CExcelData::SetDeleteSheet(LPCTSTR pSheetName)
{
	SSheet *pSheet = m_aSheet.LookupElement(pSheetName);

	pSheet->bDeleteFlag = true;
}
// By Y.itabashi (xxxxx) 2007.02.19

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::Create
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		データ配列新規作成
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRows		[I] 行数
//		int			nCols		[I] 列数
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列を指定されたサイズで確保する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::Create(int nRows, int nCols)
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];

	SAFEARRAYBOUND sb[2] = {{nRows, 1}, {nCols, 1}};
	pSheet->cSafeArray.Create(VT_VARIANT, 2, sb);

	pSheet->nUsedRows = nRows;
	pSheet->nUsedCols = nCols;
	pSheet->nAllocRows = nRows;
// Modify ... ( ADD )
	pSheet->bDeleteFlag = false;
// By Y.Itabshi (xxxxx) 2007.02.19
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::Read
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイル読み込み
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CExcelLib		&cExcel		[I] CExcelLibオブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		エクセルファイルからデータ配列へデータを読み込む。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//		未使用の行、列は除外する。
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CExcelData::Read(CExcelLib &cExcel, int nFirstSheet, int nMaxSheet)
{
	try {
		Excel::WorksheetsPtr pWorksheets = cExcel.GetWorksheets();

		int nIndex;
		CString sSheetName;

		m_aSheet.RemoveAll();

		int nSheet = pWorksheets->Count;
		if (nMaxSheet != 0 && nSheet > nMaxSheet)
			nSheet = nMaxSheet;
		for (int i = nFirstSheet; i <= nSheet; i++) {
			Excel::_WorksheetPtr pWorksheet = pWorksheets->Item[(long)i];
			if (pWorksheet->Visible) {
				sSheetName = (LPCTSTR)pWorksheet->GetName();
				SSheet *pSheet = m_aSheet.AddElement(sSheetName, nIndex);
				pSheet->sSheetName = sSheetName;
				m_nCurrentSheetNo = nIndex;
				ReadSub(pWorksheet, pSheet);
// Modify ... ( ADD )
				pSheet->bDeleteFlag = false;
// By Y.itabashi (xxxxx) 2007.02.19
			}
		}
		
		m_nCurrentSheetNo = 0;

		return TRUE;
	} catch (...) {
		return FALSE;
	}
}

void CExcelData::ReadSub(Excel::_WorksheetPtr pWorksheet, SSheet *pSheet)
{
	Excel::RangePtr pRange;
	CString sData;

	Excel::RangePtr pUsedRange = pWorksheet->UsedRange;
	pRange = pUsedRange->Rows->Item[pUsedRange->Rows->Count];
	pSheet->nUsedRows = pRange->Row;
	pRange = pUsedRange->Columns->Item[pUsedRange->Columns->Count];
	pSheet->nUsedCols = pRange->Column;
	pSheet->nAllocRows = pSheet->nUsedRows;

	_variant_t pCell1 = pWorksheet->Cells->GetItem((long)1, (long)1);
	_variant_t pCell2 = pWorksheet->Cells->GetItem((long)pSheet->nUsedRows, (long)pSheet->nUsedCols);
	pRange = pWorksheet->GetRange(pCell1, pCell2);
	if (pSheet->nUsedRows == 1 && pSheet->nUsedCols == 1) {
		Create(1, 1);
		PutElement(1, 1, pRange->Value2);
	} else
		pSheet->cSafeArray.Attach(pRange->Value2);

	// 未使用の行を除外する
	while (pSheet->nUsedRows > 0) {
		for (int nCol = 1; nCol <= pSheet->nUsedCols; nCol++) {
			GetElement(pSheet->nUsedRows, nCol, sData);
			if (!sData.IsEmpty())
				break;
		}
		if (nCol <= pSheet->nUsedCols)
			break;

		pSheet->nUsedRows--;
	}

	// 未使用の列を除外する
	while (pSheet->nUsedCols > 0) {
		for (int nRow = 1; nRow <= pSheet->nUsedRows; nRow++) {
			GetElement(nRow, pSheet->nUsedCols, sData);
			if (!sData.IsEmpty())
				break;
		}
		if (nRow <= pSheet->nUsedRows)
			break;

		pSheet->nUsedCols--;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::Write
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイル書き込み
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CExcelLib		&cExcel		[I] CExcelLibオブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列からエクセルファイルへデータを書き込む。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CExcelData::Write(CExcelLib &cExcel, LPCTSTR pPathName)
{
	try {
		Excel::WorksheetsPtr pWorksheets = cExcel.GetWorksheets();

		int nSheet = m_aSheet.GetSize();
// Modify ... ( ADD )
		int nExcelSheet = pWorksheets->Count;

		for( int icnt = nExcelSheet; icnt < nSheet; icnt++ ){
			pWorksheets->Add();
		}
// By Y.Itabashi (xxxxx) 2007.02.14

		for (int i = 0; i < nSheet; i++) {
			Excel::_WorksheetPtr pWorksheet = pWorksheets->Item[(long)(i + 1)];
			WriteSub(pWorksheet, &m_aSheet[i]);
		}

		CString sFullName = (LPCTSTR)cExcel.GetWorkbook()->GetFullName();
		if (pPathName == NULL || sFullName == pPathName)
			cExcel.GetWorkbook()->Save();
		else {
			TCHAR szFullPath[MAX_PATH];
			_fullpath(szFullPath, pPathName, sizeof(szFullPath));
			cExcel.GetWorkbook()->SaveAs(szFullPath, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, xlNoChange);
		}

		return TRUE;
	} catch (...) {
		return FALSE;
	}
}

void CExcelData::WriteSub(Excel::_WorksheetPtr pWorksheet, SSheet *pSheet)
{
	// フィルタの条件を解除
	if (pWorksheet->GetFilterMode())
		pWorksheet->ShowAllData();

	if (pSheet->nUsedRows != 0 && pSheet->nUsedCols != 0) {
		_variant_t pCell1 = pWorksheet->Cells->GetItem((long)1, (long)1);
		_variant_t pCell2 = pWorksheet->Cells->GetItem((long)pSheet->nUsedRows, (long)pSheet->nUsedCols);
		_variant_t vEmpty;
		pWorksheet->Cells->Value = vEmpty;
		Excel::RangePtr pRange = pWorksheet->GetRange(pCell1, pCell2);
		pRange->Value2 = pSheet->cSafeArray;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::Copy
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		配列データコピー
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CExcelData		&cSrc		[I] CExcelDataオブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		別のデータ配列から全データをコピーする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::Copy(CExcelData &cSrc)
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];

	pSheet->cSafeArray.Clear();
	pSheet->cSafeArray.Attach(cSrc.GetSafeArray().Detach());

	pSheet->nUsedRows = cSrc.GetUsedRows();
	pSheet->nUsedCols = cSrc.GetUsedCols();
	pSheet->nAllocRows = cSrc.GetAllocRows();
// modify ... ( ADD )
	pSheet->bDeleteFlag = false;
// By Y.Itabashi (xxxxx) 2007.02.19
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::SetSheetName
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイルのシート名変更
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CExcelLib		&cExcel		[I] CExcelLibオブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列のシート名をエクセルファイルへデータを書き込む。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2007.02.15 Y.Itabashi(xxxxx) 新規作成
//*****************************************************************************************************
BOOL CExcelData::SetSheetName(CExcelLib &cExcel, LPCTSTR pPathName)
{
	try {
		Excel::WorksheetsPtr pWorksheets = cExcel.GetWorksheets();

		int nSheet = m_aSheet.GetSize();
		for (int i = 0; i < nSheet; i++) {
			Excel::_WorksheetPtr pWorksheet = pWorksheets->Item[(long)(i + 1)];

			// sheet 名設定
			_bstr_t _sheet_name (m_aSheet[i].sSheetName);
			pWorksheet->PutName (_sheet_name);
		}

		CString sFullName = (LPCTSTR)cExcel.GetWorkbook()->GetFullName();
		if (pPathName == NULL || sFullName == pPathName)
			cExcel.GetWorkbook()->Save();
		else {
			TCHAR szFullPath[MAX_PATH];
			_fullpath(szFullPath, pPathName, sizeof(szFullPath));
			cExcel.GetWorkbook()->SaveAs(szFullPath, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, xlNoChange);
		}

		return TRUE;
	} catch (...) {
		return FALSE;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::DeleteSheet
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エクセルファイルの指定シートを削除
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CExcelLib		&cExcel		[I] CExcelLibオブジェクト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列のシート名をエクセルファイルへデータを書き込む。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2007.02.15 Y.Itabashi(xxxxx) 新規作成
//*****************************************************************************************************
BOOL CExcelData::DeleteSheet(CExcelLib &cExcel, LPCTSTR pPathName)
{
	try {
		Excel::WorksheetsPtr pWorksheets = cExcel.GetWorksheets();

		int nSheet = m_aSheet.GetSize();
		for( int icnt = nSheet-1; icnt >= 0; icnt-- ){
			if( m_aSheet[icnt].bDeleteFlag ){
				Excel::_WorksheetPtr pWorksheet = pWorksheets->Item[(long)(icnt + 1)];
				pWorksheet->Delete();
			}
		}


		CString sFullName = (LPCTSTR)cExcel.GetWorkbook()->GetFullName();
		if (pPathName == NULL || sFullName == pPathName)
			cExcel.GetWorkbook()->Save();
		else {
			TCHAR szFullPath[MAX_PATH];
			_fullpath(szFullPath, pPathName, sizeof(szFullPath));
			cExcel.GetWorkbook()->SaveAs(szFullPath, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, xlNoChange);
		}

		return TRUE;
	} catch (...) {
		return FALSE;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::Clear
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		配列データ削除
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列の要素数を0にする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::Clear()
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];

	pSheet->cSafeArray.Destroy();

	pSheet->nUsedRows = 0;
	pSheet->nUsedCols = 0;
	pSheet->nAllocRows = 0;
// Modify ... ( ADD )
	pSheet->bDeleteFlag = false;
// By Y.Itabashi (xxxxx) 2007.02.19
}

void CExcelData::SetCols(int nCols)
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];

	if (nCols > pSheet->nUsedCols) {
		SAFEARRAYBOUND sb[1] = {{nCols, 1}};
		pSheet->cSafeArray.Redim(sb);
	}

	pSheet->nUsedCols = nCols;
}

void CExcelData::SetRows(int nRows)
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];

	if (nRows > pSheet->nAllocRows)
		AddRows(nRows - pSheet->nAllocRows);
	else
		pSheet->nUsedRows = nRows;
}

int CExcelData::AddRows(int nAddRows)
{
	SSheet *pSheet = &m_aSheet[m_nCurrentSheetNo];
	int nNewRows = pSheet->nUsedRows + nAddRows;
	if (nNewRows > pSheet->nAllocRows) {
		CExcelData cTempData;
		variant_t vData;

		// 更に行追加する場合に備えて１割多く確保する
		cTempData.Create(nNewRows + nNewRows / 10, pSheet->nUsedCols);

		int nUsedRows = pSheet->nUsedRows;
		for (int nRow = 1; nRow <= nUsedRows; nRow++) {
			for (int nCol = 1; nCol <= pSheet->nUsedCols; nCol++) {
				GetElement(nRow, nCol, vData);
				cTempData.PutElement(nRow, nCol, vData);
			}
		}

		Copy(cTempData);
	}

	pSheet->nUsedRows = nNewRows;

	return nNewRows;
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::GetElement
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		Variant型データ取得
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRow		[I] 行位置
//		int			nCol		[I] 列位置
//		_variant_t	&vData		[I] 取得データ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列から指定された位置のデータをVariant型で取得する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::GetElement(int nRow, int nCol, _variant_t &vData)
{
	long nIndex[2] = {nRow, nCol};

	m_aSheet[m_nCurrentSheetNo].cSafeArray.GetElement(nIndex, &vData);
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::GetElement
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		文字列型データ取得
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRow		[I] 行位置
//		int			nCol		[I] 列位置
//		CString		&sData		[I] 取得データ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列から指定された位置のデータを文字列型で取得する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::GetElement(int nRow, int nCol, CString &sData)
{
	try {
		_variant_t vData;

		GetElement(nRow, nCol, vData);
		vData.ChangeType(VT_BSTR);
		sData = V_BSTR(&vData);
		sData.TrimLeft();
		sData.TrimRight();
	} catch (...) {
		sData.Empty();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::GetElement
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		浮動小数型データ取得
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRow		[I] 行位置
//		int			nCol		[I] 列位置
//		double		&dData		[I] 取得データ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列から指定された位置のデータを浮動小数型で取得する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::GetElement(int nRow, int nCol, double &dData)
{
	try {
		_variant_t vData;

		GetElement(nRow, nCol, vData);
		vData.ChangeType(VT_R8);
		dData = V_R8(&vData);
	} catch (...) {
		dData = 0;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::GetElement
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		整数型データ取得
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRow		[I] 行位置
//		int			nCol		[I] 列位置
//		int			&nData		[I] 取得データ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列から指定された位置のデータを整数型で取得する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::GetElement(int nRow, int nCol, int &nData)
{
	try {
		_variant_t vData;

		GetElement(nRow, nCol, vData);
		vData.ChangeType(VT_I4);
		nData = V_I4(&vData);
	} catch (...) {
		nData = 0;
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CExcelData::GetElement
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		データ書き込み
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int			nRow		[I] 行位置
//		int			nCol		[I] 列位置
//		_variant_t	vData		[I] 書き込みデータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ配列の指定された位置にデータを書き込む。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CExcelData::PutElement(int nRow, int nCol, _variant_t &vData)
{
	long nIndex[2] = {nRow, nCol};

	m_aSheet[m_nCurrentSheetNo].cSafeArray.PutElement(nIndex, &vData);
}
