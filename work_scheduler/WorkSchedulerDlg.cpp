//*****************************************************************************************************
//  1. ファイル名
//		WorkSchedulerDlg.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		CAboutDlg,CWorkSchedulerDlg クラスのインプリメンテーション
//----------------------------------------------------------------------------------------------------
//  3. 備考
//----------------------------------------------------------------------------------------------------
//  4. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************

#include "stdafx.h"
#include "WorkScheduler.h"

#include "MenuDispCtrl.h"

#include "WorkSchedulerDlg001.h"
#include "WorkSchedulerDlg.h"
#include "AboutDlg.h"
#include "DataManager.h"
#include "StartMenuDlg.h"
#include "SaveProjectDlg.h"
#include "SetConditionsDlg.h"
#include "AutoSchedulingDlg.h"
#include "ManualSchedulingDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define MENU_START				0
#define MENU_SET_CONDITIONS		1
#define MENU_AUTO_SCHEDULING	2
#define MENU_MANUAL_SCHEDULING	3

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::CWorkSchedulerDlg
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CWnd		*pParent			[I] 親ウィンドウ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		リソースからアイコンを取得する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
CWorkSchedulerDlg::CWorkSchedulerDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CWorkSchedulerDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CWorkSchedulerDlg)
		// メモ: この位置に ClassWizard によってメンバの初期化が追加されます。
	//}}AFX_DATA_INIT
	// メモ: LoadIcon は Win32 の DestroyIcon のサブシーケンスを要求しません。
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CWorkSchedulerDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CWorkSchedulerDlg)
	DDX_Control(pDX, IDC_PROGRESS_BAR, m_cProgressBar);
	DDX_Control(pDX, IDC_STATIC_STATUS, m_cStaticStatus);
	DDX_Control(pDX, IDC_BUTTON_EXIT, m_buttonExit);
	DDX_Control(pDX, IDC_BUTTON_AUTO_SCHEDULING, m_buttonAutoScheduling);
	DDX_Control(pDX, IDC_BUTTON_MANUAL_SCHEDULING, m_buttonManualScheduling);
	DDX_Control(pDX, IDC_BUTTON_SET_CONDITIONS, m_buttonSetConditions);
	DDX_Control(pDX, IDC_BUTTON_START, m_buttonStart);
	DDX_Control(pDX, IDC_STATIC_CHILD_MENU, m_cSubMenu);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CWorkSchedulerDlg, CDialogEx)
	//{{AFX_MSG_MAP(CWorkSchedulerDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_START, OnButtonStart)
	ON_BN_CLICKED(IDC_BUTTON_SET_CONDITIONS, OnButtonSetConditions)
	ON_BN_CLICKED(IDC_BUTTON_AUTO_SCHEDULING, OnButtonAutoScheduling)
	ON_BN_CLICKED(IDC_BUTTON_MANUAL_SCHEDULING, OnButtonManualScheduling)
	ON_BN_CLICKED(IDC_BUTTON_EXIT, OnButtonExit)
	ON_COMMAND(IDM_FILE_SAVE, OnFileSave)
	ON_COMMAND(IDM_FILE_SAVE_AS, OnFileSaveAs)
	ON_UPDATE_COMMAND_UI(IDM_FILE_SAVE, OnUpdateFileSave)
	ON_UPDATE_COMMAND_UI(IDM_FILE_SAVE_AS, OnUpdateFileSaveAs)
	ON_WM_INITMENUPOPUP()
	ON_COMMAND(IDM_HELP_VERSION, OnHelpVersion)
	//}}AFX_MSG_MAP
	ON_MESSAGE(WM_OPEN_EXCEL, OnOpenExcel)
	ON_MESSAGE(WM_CLOSE_EXCEL, OnCloseExcel)
	ON_MESSAGE(WM_ERROR_EXCEL, OnErrorExcel)
END_MESSAGE_MAP()

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnInitDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダイアログ初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		TRUE
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		データ管理クラスを生成し、メニュー、サブメニュー、ボタンを初期化する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
BOOL CWorkSchedulerDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

// Modify ... ( CHANGE )
	// タイトルにバージョン番号を追加
	CString sWindowVersion;
	int j = 0;
	for( int i = 0; i < g_pConst->m_sVersion.GetLength(); i++ ){
		if( g_pConst->m_sVersion[i] == '.' ){
			j++;
			if( j == 2 ){
				sWindowVersion.Format("%s", g_pConst->m_sVersion.Left(i) );
				break;
			}
		}
	}
/*	CString sWindowTitle, sWindowTitle2;
	GetWindowText(sWindowTitle);
	sWindowTitle2.Format("%s (Ver.%s)", sWindowTitle, g_pConst->m_sVersion);
	SetWindowText(sWindowTitle2);*/
// By Y.Itabashi (xxxxx) 2007.01.25

// Modify ... ( ADD )
	sprintf( Menu_WorkSchedulerDlg[0].str1, "%s", sWindowVersion );
	g_pSystem->m_cMenuDisp.SetMenuText( this, Menu_WorkSchedulerDlg );
// By Y.Itabashi (xxxxx) 2007.01.24

	// IDM_ABOUTBOX はコマンド メニューの範囲でなければなりません。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
//		CString strAboutMenu;
//		strAboutMenu.LoadString(IDS_ABOUTBOX);
//		if (!strAboutMenu.IsEmpty())
//		{
//			pSysMenu->AppendMenu(MF_SEPARATOR);
//			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
//		}
	}

	// このダイアログ用のアイコンを設定します。フレームワークはアプリケーションのメイン
	// ウィンドウがダイアログでない時は自動的に設定しません。
	SetIcon(m_hIcon, TRUE);			// 大きいアイコンを設定
	SetIcon(m_hIcon, FALSE);		// 小さいアイコンを設定

	InitMenuButton();
	InitSubMenu();
	EnableMenu();

// Modify ... ( ADD )
	g_pSystem->m_cMenuDisp.SetMenuText( this, Menu_WorkSchedulerMenu );
// By Y.Itabashi (xxxxx) 2007.01.26

	return TRUE;  // TRUE を返すとコントロールに設定したフォーカスは失われません。
}

void CWorkSchedulerDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// もしダイアログボックスに最小化ボタンを追加するならば、アイコンを描画する
// コードを以下に記述する必要があります。MFC アプリケーションは document/view
// モデルを使っているので、この処理はフレームワークにより自動的に処理されます。

void CWorkSchedulerDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 描画用のデバイス コンテキスト

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// クライアントの矩形領域内の中央
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// アイコンを描画します。
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// システムは、ユーザーが最小化ウィンドウをドラッグしている間、
// カーソルを表示するためにここを呼び出します。
HCURSOR CWorkSchedulerDlg::OnQueryDragIcon()
{
	return (HCURSOR)m_hIcon;
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::InitMenuButton
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		メニューボタン初期化
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		メニューボタンを配列に入れ、ボタンの色を設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::InitMenuButton()
{
	// メニューボタンを配列に設定
	m_arrayMenuButton.Add(&m_buttonStart);
	m_arrayMenuButton.Add(&m_buttonSetConditions);
	m_arrayMenuButton.Add(&m_buttonAutoScheduling);
	m_arrayMenuButton.Add(&m_buttonManualScheduling);
	m_arrayMenuButton.Add(&m_buttonExit);

	// ボタンの色を設定
	int nSize = m_arrayMenuButton.GetSize();
	for (int i = 0; i < nSize; i++)
		m_arrayMenuButton[i]->SetBackGroundColor(COLOR_MENU_BUTTON);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::InitSubMenu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		サブメニュー初期化
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		サブメニューのダイアログを配列に入れ、「編成開始」を選択状態にする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::InitSubMenu()
{
	// サブメニューのダイアログを配列に設定
	m_cSubMenu.Add(new CStartMenuDlg, IDD_START_MENU);
	m_cSubMenu.Add(new CSetConditionsDlg, IDD_SET_CONDITIONS);
	m_cSubMenu.Add(new CAutoSchedulingDlg, IDD_AUTO_SCHEDULING);
	m_cSubMenu.Add(new CManualSchedulingDlg, IDD_MANUAL_SCHEDULING);

	// 「編成開始」を選択
	SelectMenu(MENU_START);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::SelectMenu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		メニュー選択
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int		nIndex			[I] 選択するメニューのインデックス
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		全てのメニューボタンの選択を解除した後、指定されたメニューボタンを選択状態にし、
//		サブメニューを表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::SelectMenu(int nIndex)
{
	// 選択状態を解除
	int nSize = m_arrayMenuButton.GetSize();
	for (int i = 0; i < nSize; i++) {
		if (m_arrayMenuButton[i]->GetCheck() != 0) {
			m_arrayMenuButton[i]->SetCheck(0);
			m_arrayMenuButton[i]->Invalidate();
		}
	}

	// 指定されたメニューボタンを選択状態に設定
	m_arrayMenuButton[nIndex]->SetCheck(1);
	m_arrayMenuButton[nIndex]->Invalidate();

	// サブメニューを表示
	m_cSubMenu.Show(nIndex);

	// ステータスバーに表示
	m_arrayMenuButton[nIndex]->GetWindowText(m_sMainStatus);
	m_cStaticStatus.SetWindowText(m_sMainStatus);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::EnableMenu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		メニューボタンの有効化設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ステータスによりメニューボタンの有効／無効を設定する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::EnableMenu()
{
	// 編成条件設定ボタン
	m_buttonSetConditions.EnableWindow(g_pDataManager->m_nStatus >= STATUS_READ_DATA);

	// 編成実行ボタン
	m_buttonAutoScheduling.EnableWindow(g_pDataManager->m_nStatus >= STATUS_SEISAN_JOKEN && !g_pDataManager->m_bOpenLineKiseiMatrix && !g_pDataManager->m_bOpenKatashikiKiseiMatrix);

	// 手動編成ボタン
	BOOL bSagyoshaWaritsuke = FALSE;
	int nSublineNum = g_pDataManager->GetSublineNum();
	for (int nSublineId = 0; nSublineId < nSublineNum; nSublineId++) {
		SSubline *pSubline = g_pDataManager->GetSublineData(nSublineId);
		if (pSubline->bSagyoshaWaritsuke) {
			bSagyoshaWaritsuke = TRUE;
			break;
		}
	}
	m_buttonManualScheduling.EnableWindow(g_pDataManager->m_nStatus >= STATUS_SEISAN_JOKEN && bSagyoshaWaritsuke);

	// サブメニューのボタン
	m_cSubMenu.EnableMenu();
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::SetSubMenuStatus
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		サブメニューによるステータス表示
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		pText			[I] ステータスバーに表示するテキスト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		指定されたテキストをステータスバーに表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::SetSubMenuStatus(LPCTSTR pText)
{
	m_cStaticStatus.SetWindowText(m_sMainStatus + "：" + pText);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::SetSubMenuStatus
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		サブメニューによるステータス表示
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CWnd		&wndButton			[I] サブメニューボタン
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		指定されたサブメニューボタンのテキストをステータスバーに表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::SetSubMenuStatus(CWnd &wndButton)
{
	CString sText;
	wndButton.GetWindowText(sText);
	SetSubMenuStatus(sText);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::ClearSubMenuStatus
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		サブメニューのステータス消去
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ステータスバーからサブメニューのテキストを消去する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::ClearSubMenuStatus()
{
	m_cStaticStatus.SetWindowText(m_sMainStatus);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnButtonStart
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「編成開始」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		編成開始サブメニューを表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnButtonStart()
{
	SelectMenu(MENU_START);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnButtonSetConditions
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「編成条件設定」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		編成条件設定サブメニューを表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnButtonSetConditions()
{
	SelectMenu(MENU_SET_CONDITIONS);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnButtonAutoScheduling
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「編成実行」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		編成実行サブメニューを表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnButtonAutoScheduling()
{
	SelectMenu(MENU_AUTO_SCHEDULING);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnButtonManualScheduling
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「手動編成」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		手動編成サブメニューを表示する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnButtonManualScheduling()
{
	SelectMenu(MENU_MANUAL_SCHEDULING);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnButtonExit
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「終了」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		要素作業表が更新されている場合は保存し、プログラムを終了する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnButtonExit()
{
	if (!g_pSystem->m_bReadOnly && g_pDataManager->m_bUpdate) {
		if (g_pSystem->DispMessage("Q030001") == IDYES)
			g_pDataManager->SaveFile();
	}

	if (g_pSystem->DispMessage("Q030002") == IDYES)
		DestroyWindow();
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnFileSave
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		上書き保存処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		要素作業表を上書き保存する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnFileSave()
{
	g_pSystem->m_Save_mode = 1;	//2007/02/10 xxxxx kuwa

	if (g_pSystem->DispMessage("Q003003") == IDYES) {
		if (g_pDataManager->SaveFile())
			g_pSystem->DispMessage("I003004");
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnFileSaveAs
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		名前を付けて保存処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ファイル保存ダイアログを表示し、入力されたファイル名で要素作業表を保存する。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnFileSaveAs()
{
	g_pSystem->m_Save_mode = 2;	//2007/02/10 xxxxx kuwa

	CSaveProjectDlg dlg;
	if (dlg.DoModal() == IDOK)
		g_pSystem->DispMessage("I002005");
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnCancel
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		キャンセル処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		終了処理と同じ。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnCancel()
{
#ifdef _DEBUG
	DestroyWindow();
#else
	OnButtonExit();
#endif
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnUpdateFileSave
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		上書き保存メニュー有効化設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CCmdUI		*pCmdUI			[I] CCmdUIオブジェクトポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		エクセルファイルが読まれていれば上書き保存メニューを有効にする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnUpdateFileSave(CCmdUI* pCmdUI)
{
	pCmdUI->Enable(g_pDataManager->m_nStatus != STATUS_NOREAD && !g_pSystem->m_bReadOnly);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnUpdateFileSaveAs
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		名前を付けて保存メニュー有効化設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CCmdUI		*pCmdUI			[I] CCmdUIオブジェクトポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		エクセルファイルが読まれていれば名前を付けて保存メニューを有効にする。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
void CWorkSchedulerDlg::OnUpdateFileSaveAs(CCmdUI* pCmdUI)
{
	pCmdUI->Enable(g_pDataManager->m_nStatus != STATUS_NOREAD);
}

//*****************************************************************************************************
//  1. 関数名
//		CWorkSchedulerDlg::OnInitMenuPopup
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		メニュー表示ハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CMenu		*pPopupMenu		[I] メニューオブジェクトポインタ
//		UINT		nIndex			[I] メニューインデックス
//		BOOL		bSysMenu		[I] システムメニューフラグ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//----------------------------------------------------------------------------------------------------
//  5. 処理概要
//		ダイアログでOnUpdate**ハンドラを有効にするための処理。
//----------------------------------------------------------------------------------------------------
//  6. 備考
//		MFCのFrameWndクラスからコピー
//----------------------------------------------------------------------------------------------------
//  7. 履歴
//		2006.09.01 S.Aizawa(xxx) 新規作成
//*****************************************************************************************************
// メニュー表示ハンドラ
void CWorkSchedulerDlg::OnInitMenuPopup(CMenu* pPopupMenu, UINT nIndex, BOOL bSysMenu)
{
	CDialogEx::OnInitMenuPopup(pPopupMenu, nIndex, bSysMenu);

	// [artifact]CMainFrameのメンバ変数 m_bAutoMenuEnable の代わりに定義。
	// true ならデフォルトでメニューが無効状態になる。
	bool bAutoMenuEnable = true;

//	AfxCancelModes(m_hWnd);

	if (bSysMenu)
		return; // don't support system menu

	ASSERT(pPopupMenu != NULL);
	// check the enabled state of various menu items

	CCmdUI state;
	state.m_pMenu = pPopupMenu;
	ASSERT(state.m_pOther == NULL);
	ASSERT(state.m_pParentMenu == NULL);

	// determine if menu is popup in top-level menu and set m_pOther to
	//  it if so (m_pParentMenu == NULL indicates that it is secondary popup)
	HMENU hParentMenu;
	if (AfxGetThreadState()->m_hTrackingMenu == pPopupMenu->m_hMenu)
		state.m_pParentMenu = pPopupMenu; // parent == child for tracking popup
	else if ((hParentMenu = ::GetMenu(m_hWnd)) != NULL)
	{
		CWnd* pParent = GetTopLevelParent();
		// child windows don't have menus -- need to go to the top!
		if (pParent != NULL &&
			(hParentMenu = ::GetMenu(pParent->m_hWnd)) != NULL)
		{
			int nIndexMax = ::GetMenuItemCount(hParentMenu);
			for (int nIndex = 0; nIndex < nIndexMax; nIndex++)
			{
				if (::GetSubMenu(hParentMenu, nIndex) == pPopupMenu->m_hMenu)
				{
					// when popup is found, m_pParentMenu is containing menu
					state.m_pParentMenu = CMenu::FromHandle(hParentMenu);
					break;
				}
			}
		}
	}

	state.m_nIndexMax = pPopupMenu->GetMenuItemCount();
	for (state.m_nIndex = 0; state.m_nIndex < state.m_nIndexMax;
			state.m_nIndex++)
	{
		state.m_nID = pPopupMenu->GetMenuItemID(state.m_nIndex);
		if (state.m_nID == 0)
			continue; // menu separator or invalid cmd - ignore it

		ASSERT(state.m_pOther == NULL);
		ASSERT(state.m_pMenu != NULL);
		if (state.m_nID == (UINT)-1)
		{
			// possibly a popup menu, route to first item of that popup
			state.m_pSubMenu = pPopupMenu->GetSubMenu(state.m_nIndex);
			if (state.m_pSubMenu == NULL ||
				(state.m_nID = state.m_pSubMenu->GetMenuItemID(0)) == 0 ||
				state.m_nID == (UINT)-1)
			{
				continue;       // first item of popup can't be routed to
			}
			state.DoUpdate(this, FALSE);    // popups are never auto disabled
		}
		else
		{
			// normal menu item
			// Auto enable/disable if frame window has 'm_bAutoMenuEnable'
			//    set and command is _not_ a system command.
			state.m_pSubMenu = NULL;
			state.DoUpdate(this, bAutoMenuEnable && state.m_nID < 0xF000);
		}

		// adjust for menu deletions and additions
		UINT nCount = pPopupMenu->GetMenuItemCount();
		if (nCount < state.m_nIndexMax)
		{
			state.m_nIndex -= (state.m_nIndexMax - nCount);
			while (state.m_nIndex < nCount &&
				pPopupMenu->GetMenuItemID(state.m_nIndex) == state.m_nID)
			{
				state.m_nIndex++;
			}
		}
		state.m_nIndexMax = nCount;
	}
}

void CWorkSchedulerDlg::OnHelpVersion()
{
	CAboutDlg dlgAbout;
	dlgAbout.DoModal();
}

void CWorkSchedulerDlg::PostNcDestroy()
{
	CDialogEx::PostNcDestroy();

	delete this;
}

LRESULT CWorkSchedulerDlg::OnOpenExcel(WPARAM wParam, LPARAM lParam)
{
	g_pDataManager->OpenExcelNotify(wParam);

	EnableMenu();

	return 0;
}

LRESULT CWorkSchedulerDlg::OnCloseExcel(WPARAM wParam, LPARAM lParam)
{
	g_pDataManager->CloseExcelNotify(wParam);

	EnableMenu();

	return 0;
}

LRESULT CWorkSchedulerDlg::OnErrorExcel(WPARAM wParam, LPARAM lParam)
{
	g_pDataManager->ErrorExcelNotify(wParam);

	EnableMenu();

	return 0;
}

// Enterキーでダイアログが閉じるのを抑止
void CWorkSchedulerDlg::OnOK()
{
}
