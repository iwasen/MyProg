'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsWork
    Inherits DataSet
    
    Private table在庫変更履歴 As 在庫変更履歴DataTable
    
    Private tableピッキングリスト As ピッキングリストDataTable
    
    Private table欠品リスト As 欠品リストDataTable
    
    Private table発注点警告リスト As 発注点警告リストDataTable
    
    Private tableパーツ在庫リスト As パーツ在庫リストDataTable
    
    Private table棚卸入力 As 棚卸入力DataTable
    
    Private table受注明細 As 受注明細DataTable
    
    Private table入出庫入力 As 入出庫入力DataTable
    
    Private tableパーツ展開 As パーツ展開DataTable
    
    Private tableパーツ在庫引当 As パーツ在庫引当DataTable
    
    Private table受注ファイル As 受注ファイルDataTable
    
    Private table月別出庫データ As 月別出庫データDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("在庫変更履歴")) Is Nothing) Then
                Me.Tables.Add(New 在庫変更履歴DataTable(ds.Tables("在庫変更履歴")))
            End If
            If (Not (ds.Tables("ピッキングリスト")) Is Nothing) Then
                Me.Tables.Add(New ピッキングリストDataTable(ds.Tables("ピッキングリスト")))
            End If
            If (Not (ds.Tables("欠品リスト")) Is Nothing) Then
                Me.Tables.Add(New 欠品リストDataTable(ds.Tables("欠品リスト")))
            End If
            If (Not (ds.Tables("発注点警告リスト")) Is Nothing) Then
                Me.Tables.Add(New 発注点警告リストDataTable(ds.Tables("発注点警告リスト")))
            End If
            If (Not (ds.Tables("パーツ在庫リスト")) Is Nothing) Then
                Me.Tables.Add(New パーツ在庫リストDataTable(ds.Tables("パーツ在庫リスト")))
            End If
            If (Not (ds.Tables("棚卸入力")) Is Nothing) Then
                Me.Tables.Add(New 棚卸入力DataTable(ds.Tables("棚卸入力")))
            End If
            If (Not (ds.Tables("受注明細")) Is Nothing) Then
                Me.Tables.Add(New 受注明細DataTable(ds.Tables("受注明細")))
            End If
            If (Not (ds.Tables("入出庫入力")) Is Nothing) Then
                Me.Tables.Add(New 入出庫入力DataTable(ds.Tables("入出庫入力")))
            End If
            If (Not (ds.Tables("パーツ展開")) Is Nothing) Then
                Me.Tables.Add(New パーツ展開DataTable(ds.Tables("パーツ展開")))
            End If
            If (Not (ds.Tables("パーツ在庫引当")) Is Nothing) Then
                Me.Tables.Add(New パーツ在庫引当DataTable(ds.Tables("パーツ在庫引当")))
            End If
            If (Not (ds.Tables("受注ファイル")) Is Nothing) Then
                Me.Tables.Add(New 受注ファイルDataTable(ds.Tables("受注ファイル")))
            End If
            If (Not (ds.Tables("月別出庫データ")) Is Nothing) Then
                Me.Tables.Add(New 月別出庫データDataTable(ds.Tables("月別出庫データ")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 在庫変更履歴 As 在庫変更履歴DataTable
        Get
            Return Me.table在庫変更履歴
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ピッキングリスト As ピッキングリストDataTable
        Get
            Return Me.tableピッキングリスト
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 欠品リスト As 欠品リストDataTable
        Get
            Return Me.table欠品リスト
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 発注点警告リスト As 発注点警告リストDataTable
        Get
            Return Me.table発注点警告リスト
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property パーツ在庫リスト As パーツ在庫リストDataTable
        Get
            Return Me.tableパーツ在庫リスト
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 棚卸入力 As 棚卸入力DataTable
        Get
            Return Me.table棚卸入力
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 受注明細 As 受注明細DataTable
        Get
            Return Me.table受注明細
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 入出庫入力 As 入出庫入力DataTable
        Get
            Return Me.table入出庫入力
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property パーツ展開 As パーツ展開DataTable
        Get
            Return Me.tableパーツ展開
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property パーツ在庫引当 As パーツ在庫引当DataTable
        Get
            Return Me.tableパーツ在庫引当
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 受注ファイル As 受注ファイルDataTable
        Get
            Return Me.table受注ファイル
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property 月別出庫データ As 月別出庫データDataTable
        Get
            Return Me.table月別出庫データ
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsWork = CType(MyBase.Clone,dsWork)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("在庫変更履歴")) Is Nothing) Then
            Me.Tables.Add(New 在庫変更履歴DataTable(ds.Tables("在庫変更履歴")))
        End If
        If (Not (ds.Tables("ピッキングリスト")) Is Nothing) Then
            Me.Tables.Add(New ピッキングリストDataTable(ds.Tables("ピッキングリスト")))
        End If
        If (Not (ds.Tables("欠品リスト")) Is Nothing) Then
            Me.Tables.Add(New 欠品リストDataTable(ds.Tables("欠品リスト")))
        End If
        If (Not (ds.Tables("発注点警告リスト")) Is Nothing) Then
            Me.Tables.Add(New 発注点警告リストDataTable(ds.Tables("発注点警告リスト")))
        End If
        If (Not (ds.Tables("パーツ在庫リスト")) Is Nothing) Then
            Me.Tables.Add(New パーツ在庫リストDataTable(ds.Tables("パーツ在庫リスト")))
        End If
        If (Not (ds.Tables("棚卸入力")) Is Nothing) Then
            Me.Tables.Add(New 棚卸入力DataTable(ds.Tables("棚卸入力")))
        End If
        If (Not (ds.Tables("受注明細")) Is Nothing) Then
            Me.Tables.Add(New 受注明細DataTable(ds.Tables("受注明細")))
        End If
        If (Not (ds.Tables("入出庫入力")) Is Nothing) Then
            Me.Tables.Add(New 入出庫入力DataTable(ds.Tables("入出庫入力")))
        End If
        If (Not (ds.Tables("パーツ展開")) Is Nothing) Then
            Me.Tables.Add(New パーツ展開DataTable(ds.Tables("パーツ展開")))
        End If
        If (Not (ds.Tables("パーツ在庫引当")) Is Nothing) Then
            Me.Tables.Add(New パーツ在庫引当DataTable(ds.Tables("パーツ在庫引当")))
        End If
        If (Not (ds.Tables("受注ファイル")) Is Nothing) Then
            Me.Tables.Add(New 受注ファイルDataTable(ds.Tables("受注ファイル")))
        End If
        If (Not (ds.Tables("月別出庫データ")) Is Nothing) Then
            Me.Tables.Add(New 月別出庫データDataTable(ds.Tables("月別出庫データ")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.table在庫変更履歴 = CType(Me.Tables("在庫変更履歴"),在庫変更履歴DataTable)
        If (Not (Me.table在庫変更履歴) Is Nothing) Then
            Me.table在庫変更履歴.InitVars
        End If
        Me.tableピッキングリスト = CType(Me.Tables("ピッキングリスト"),ピッキングリストDataTable)
        If (Not (Me.tableピッキングリスト) Is Nothing) Then
            Me.tableピッキングリスト.InitVars
        End If
        Me.table欠品リスト = CType(Me.Tables("欠品リスト"),欠品リストDataTable)
        If (Not (Me.table欠品リスト) Is Nothing) Then
            Me.table欠品リスト.InitVars
        End If
        Me.table発注点警告リスト = CType(Me.Tables("発注点警告リスト"),発注点警告リストDataTable)
        If (Not (Me.table発注点警告リスト) Is Nothing) Then
            Me.table発注点警告リスト.InitVars
        End If
        Me.tableパーツ在庫リスト = CType(Me.Tables("パーツ在庫リスト"),パーツ在庫リストDataTable)
        If (Not (Me.tableパーツ在庫リスト) Is Nothing) Then
            Me.tableパーツ在庫リスト.InitVars
        End If
        Me.table棚卸入力 = CType(Me.Tables("棚卸入力"),棚卸入力DataTable)
        If (Not (Me.table棚卸入力) Is Nothing) Then
            Me.table棚卸入力.InitVars
        End If
        Me.table受注明細 = CType(Me.Tables("受注明細"),受注明細DataTable)
        If (Not (Me.table受注明細) Is Nothing) Then
            Me.table受注明細.InitVars
        End If
        Me.table入出庫入力 = CType(Me.Tables("入出庫入力"),入出庫入力DataTable)
        If (Not (Me.table入出庫入力) Is Nothing) Then
            Me.table入出庫入力.InitVars
        End If
        Me.tableパーツ展開 = CType(Me.Tables("パーツ展開"),パーツ展開DataTable)
        If (Not (Me.tableパーツ展開) Is Nothing) Then
            Me.tableパーツ展開.InitVars
        End If
        Me.tableパーツ在庫引当 = CType(Me.Tables("パーツ在庫引当"),パーツ在庫引当DataTable)
        If (Not (Me.tableパーツ在庫引当) Is Nothing) Then
            Me.tableパーツ在庫引当.InitVars
        End If
        Me.table受注ファイル = CType(Me.Tables("受注ファイル"),受注ファイルDataTable)
        If (Not (Me.table受注ファイル) Is Nothing) Then
            Me.table受注ファイル.InitVars
        End If
        Me.table月別出庫データ = CType(Me.Tables("月別出庫データ"),月別出庫データDataTable)
        If (Not (Me.table月別出庫データ) Is Nothing) Then
            Me.table月別出庫データ.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsWork"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Work.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.table在庫変更履歴 = New 在庫変更履歴DataTable
        Me.Tables.Add(Me.table在庫変更履歴)
        Me.tableピッキングリスト = New ピッキングリストDataTable
        Me.Tables.Add(Me.tableピッキングリスト)
        Me.table欠品リスト = New 欠品リストDataTable
        Me.Tables.Add(Me.table欠品リスト)
        Me.table発注点警告リスト = New 発注点警告リストDataTable
        Me.Tables.Add(Me.table発注点警告リスト)
        Me.tableパーツ在庫リスト = New パーツ在庫リストDataTable
        Me.Tables.Add(Me.tableパーツ在庫リスト)
        Me.table棚卸入力 = New 棚卸入力DataTable
        Me.Tables.Add(Me.table棚卸入力)
        Me.table受注明細 = New 受注明細DataTable
        Me.Tables.Add(Me.table受注明細)
        Me.table入出庫入力 = New 入出庫入力DataTable
        Me.Tables.Add(Me.table入出庫入力)
        Me.tableパーツ展開 = New パーツ展開DataTable
        Me.Tables.Add(Me.tableパーツ展開)
        Me.tableパーツ在庫引当 = New パーツ在庫引当DataTable
        Me.Tables.Add(Me.tableパーツ在庫引当)
        Me.table受注ファイル = New 受注ファイルDataTable
        Me.Tables.Add(Me.table受注ファイル)
        Me.table月別出庫データ = New 月別出庫データDataTable
        Me.Tables.Add(Me.table月別出庫データ)
    End Sub
    
    Private Function ShouldSerialize在庫変更履歴() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeピッキングリスト() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize欠品リスト() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize発注点警告リスト() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeパーツ在庫リスト() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize棚卸入力() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize受注明細() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize入出庫入力() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeパーツ展開() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeパーツ在庫引当() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize受注ファイル() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize月別出庫データ() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub 在庫変更履歴RowChangeEventHandler(ByVal sender As Object, ByVal e As 在庫変更履歴RowChangeEvent)
    
    Public Delegate Sub ピッキングリストRowChangeEventHandler(ByVal sender As Object, ByVal e As ピッキングリストRowChangeEvent)
    
    Public Delegate Sub 欠品リストRowChangeEventHandler(ByVal sender As Object, ByVal e As 欠品リストRowChangeEvent)
    
    Public Delegate Sub 発注点警告リストRowChangeEventHandler(ByVal sender As Object, ByVal e As 発注点警告リストRowChangeEvent)
    
    Public Delegate Sub パーツ在庫リストRowChangeEventHandler(ByVal sender As Object, ByVal e As パーツ在庫リストRowChangeEvent)
    
    Public Delegate Sub 棚卸入力RowChangeEventHandler(ByVal sender As Object, ByVal e As 棚卸入力RowChangeEvent)
    
    Public Delegate Sub 受注明細RowChangeEventHandler(ByVal sender As Object, ByVal e As 受注明細RowChangeEvent)
    
    Public Delegate Sub 入出庫入力RowChangeEventHandler(ByVal sender As Object, ByVal e As 入出庫入力RowChangeEvent)
    
    Public Delegate Sub パーツ展開RowChangeEventHandler(ByVal sender As Object, ByVal e As パーツ展開RowChangeEvent)
    
    Public Delegate Sub パーツ在庫引当RowChangeEventHandler(ByVal sender As Object, ByVal e As パーツ在庫引当RowChangeEvent)
    
    Public Delegate Sub 受注ファイルRowChangeEventHandler(ByVal sender As Object, ByVal e As 受注ファイルRowChangeEvent)
    
    Public Delegate Sub 月別出庫データRowChangeEventHandler(ByVal sender As Object, ByVal e As 月別出庫データRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 在庫変更履歴DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column通し番号 As DataColumn
        
        Private columnパーツ名称 As DataColumn
        
        Private column処理日時 As DataColumn
        
        Private column入出庫区分 As DataColumn
        
        Private column数量 As DataColumn
        
        Friend Sub New()
            MyBase.New("在庫変更履歴")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 通し番号Column As DataColumn
            Get
                Return Me.column通し番号
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 処理日時Column As DataColumn
            Get
                Return Me.column処理日時
            End Get
        End Property
        
        Friend ReadOnly Property 入出庫区分Column As DataColumn
            Get
                Return Me.column入出庫区分
            End Get
        End Property
        
        Friend ReadOnly Property 数量Column As DataColumn
            Get
                Return Me.column数量
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 在庫変更履歴Row
            Get
                Return CType(Me.Rows(index),在庫変更履歴Row)
            End Get
        End Property
        
        Public Event 在庫変更履歴RowChanged As 在庫変更履歴RowChangeEventHandler
        
        Public Event 在庫変更履歴RowChanging As 在庫変更履歴RowChangeEventHandler
        
        Public Event 在庫変更履歴RowDeleted As 在庫変更履歴RowChangeEventHandler
        
        Public Event 在庫変更履歴RowDeleting As 在庫変更履歴RowChangeEventHandler
        
        Public Overloads Sub Add在庫変更履歴Row(ByVal row As 在庫変更履歴Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add在庫変更履歴Row(ByVal パーツ名称 As String, ByVal 処理日時 As Date, ByVal 入出庫区分 As String, ByVal 数量 As Integer) As 在庫変更履歴Row
            Dim row在庫変更履歴Row As 在庫変更履歴Row = CType(Me.NewRow,在庫変更履歴Row)
            row在庫変更履歴Row.ItemArray = New Object() {Nothing, パーツ名称, 処理日時, 入出庫区分, 数量}
            Me.Rows.Add(row在庫変更履歴Row)
            Return row在庫変更履歴Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 在庫変更履歴DataTable = CType(MyBase.Clone,在庫変更履歴DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 在庫変更履歴DataTable
        End Function
        
        Friend Sub InitVars()
            Me.column通し番号 = Me.Columns("通し番号")
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column処理日時 = Me.Columns("処理日時")
            Me.column入出庫区分 = Me.Columns("入出庫区分")
            Me.column数量 = Me.Columns("数量")
        End Sub
        
        Private Sub InitClass()
            Me.column通し番号 = New DataColumn("通し番号", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column通し番号)
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column処理日時 = New DataColumn("処理日時", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column処理日時)
            Me.column入出庫区分 = New DataColumn("入出庫区分", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column入出庫区分)
            Me.column数量 = New DataColumn("数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量)
            Me.column通し番号.AutoIncrement = true
            Me.column通し番号.AllowDBNull = false
        End Sub
        
        Public Function New在庫変更履歴Row() As 在庫変更履歴Row
            Return CType(Me.NewRow,在庫変更履歴Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 在庫変更履歴Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(在庫変更履歴Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.在庫変更履歴RowChangedEvent) Is Nothing) Then
                RaiseEvent 在庫変更履歴RowChanged(Me, New 在庫変更履歴RowChangeEvent(CType(e.Row,在庫変更履歴Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.在庫変更履歴RowChangingEvent) Is Nothing) Then
                RaiseEvent 在庫変更履歴RowChanging(Me, New 在庫変更履歴RowChangeEvent(CType(e.Row,在庫変更履歴Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.在庫変更履歴RowDeletedEvent) Is Nothing) Then
                RaiseEvent 在庫変更履歴RowDeleted(Me, New 在庫変更履歴RowChangeEvent(CType(e.Row,在庫変更履歴Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.在庫変更履歴RowDeletingEvent) Is Nothing) Then
                RaiseEvent 在庫変更履歴RowDeleting(Me, New 在庫変更履歴RowChangeEvent(CType(e.Row,在庫変更履歴Row), e.Action))
            End If
        End Sub
        
        Public Sub Remove在庫変更履歴Row(ByVal row As 在庫変更履歴Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 在庫変更履歴Row
        Inherits DataRow
        
        Private table在庫変更履歴 As 在庫変更履歴DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table在庫変更履歴 = CType(Me.Table,在庫変更履歴DataTable)
        End Sub
        
        Public Property 通し番号 As Integer
            Get
                Return CType(Me(Me.table在庫変更履歴.通し番号Column),Integer)
            End Get
            Set
                Me(Me.table在庫変更履歴.通し番号Column) = value
            End Set
        End Property
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.table在庫変更履歴.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table在庫変更履歴.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 処理日時 As Date
            Get
                Try 
                    Return CType(Me(Me.table在庫変更履歴.処理日時Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table在庫変更履歴.処理日時Column) = value
            End Set
        End Property
        
        Public Property 入出庫区分 As String
            Get
                Try 
                    Return CType(Me(Me.table在庫変更履歴.入出庫区分Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table在庫変更履歴.入出庫区分Column) = value
            End Set
        End Property
        
        Public Property 数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.table在庫変更履歴.数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table在庫変更履歴.数量Column) = value
            End Set
        End Property
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.table在庫変更履歴.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.table在庫変更履歴.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is処理日時Null() As Boolean
            Return Me.IsNull(Me.table在庫変更履歴.処理日時Column)
        End Function
        
        Public Sub Set処理日時Null()
            Me(Me.table在庫変更履歴.処理日時Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is入出庫区分Null() As Boolean
            Return Me.IsNull(Me.table在庫変更履歴.入出庫区分Column)
        End Function
        
        Public Sub Set入出庫区分Null()
            Me(Me.table在庫変更履歴.入出庫区分Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量Null() As Boolean
            Return Me.IsNull(Me.table在庫変更履歴.数量Column)
        End Function
        
        Public Sub Set数量Null()
            Me(Me.table在庫変更履歴.数量Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 在庫変更履歴RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 在庫変更履歴Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 在庫変更履歴Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 在庫変更履歴Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ピッキングリストDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column顧客名 As DataColumn
        
        Private column納期 As DataColumn
        
        Private columnパーツ名称 As DataColumn
        
        Private column数量 As DataColumn
        
        Private column備考 As DataColumn
        
        Friend Sub New()
            MyBase.New("ピッキングリスト")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 顧客名Column As DataColumn
            Get
                Return Me.column顧客名
            End Get
        End Property
        
        Friend ReadOnly Property 納期Column As DataColumn
            Get
                Return Me.column納期
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 数量Column As DataColumn
            Get
                Return Me.column数量
            End Get
        End Property
        
        Friend ReadOnly Property 備考Column As DataColumn
            Get
                Return Me.column備考
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ピッキングリストRow
            Get
                Return CType(Me.Rows(index),ピッキングリストRow)
            End Get
        End Property
        
        Public Event ピッキングリストRowChanged As ピッキングリストRowChangeEventHandler
        
        Public Event ピッキングリストRowChanging As ピッキングリストRowChangeEventHandler
        
        Public Event ピッキングリストRowDeleted As ピッキングリストRowChangeEventHandler
        
        Public Event ピッキングリストRowDeleting As ピッキングリストRowChangeEventHandler
        
        Public Overloads Sub AddピッキングリストRow(ByVal row As ピッキングリストRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddピッキングリストRow(ByVal 顧客名 As String, ByVal 納期 As Date, ByVal パーツ名称 As String, ByVal 数量 As Integer, ByVal 備考 As String) As ピッキングリストRow
            Dim rowピッキングリストRow As ピッキングリストRow = CType(Me.NewRow,ピッキングリストRow)
            rowピッキングリストRow.ItemArray = New Object() {顧客名, 納期, パーツ名称, 数量, 備考}
            Me.Rows.Add(rowピッキングリストRow)
            Return rowピッキングリストRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ピッキングリストDataTable = CType(MyBase.Clone,ピッキングリストDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ピッキングリストDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column顧客名 = Me.Columns("顧客名")
            Me.column納期 = Me.Columns("納期")
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column数量 = Me.Columns("数量")
            Me.column備考 = Me.Columns("備考")
        End Sub
        
        Private Sub InitClass()
            Me.column顧客名 = New DataColumn("顧客名", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column顧客名)
            Me.column納期 = New DataColumn("納期", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column納期)
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column数量 = New DataColumn("数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量)
            Me.column備考 = New DataColumn("備考", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column備考)
        End Sub
        
        Public Function NewピッキングリストRow() As ピッキングリストRow
            Return CType(Me.NewRow,ピッキングリストRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ピッキングリストRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ピッキングリストRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ピッキングリストRowChangedEvent) Is Nothing) Then
                RaiseEvent ピッキングリストRowChanged(Me, New ピッキングリストRowChangeEvent(CType(e.Row,ピッキングリストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ピッキングリストRowChangingEvent) Is Nothing) Then
                RaiseEvent ピッキングリストRowChanging(Me, New ピッキングリストRowChangeEvent(CType(e.Row,ピッキングリストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ピッキングリストRowDeletedEvent) Is Nothing) Then
                RaiseEvent ピッキングリストRowDeleted(Me, New ピッキングリストRowChangeEvent(CType(e.Row,ピッキングリストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ピッキングリストRowDeletingEvent) Is Nothing) Then
                RaiseEvent ピッキングリストRowDeleting(Me, New ピッキングリストRowChangeEvent(CType(e.Row,ピッキングリストRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveピッキングリストRow(ByVal row As ピッキングリストRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ピッキングリストRow
        Inherits DataRow
        
        Private tableピッキングリスト As ピッキングリストDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableピッキングリスト = CType(Me.Table,ピッキングリストDataTable)
        End Sub
        
        Public Property 顧客名 As String
            Get
                Try 
                    Return CType(Me(Me.tableピッキングリスト.顧客名Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableピッキングリスト.顧客名Column) = value
            End Set
        End Property
        
        Public Property 納期 As Date
            Get
                Try 
                    Return CType(Me(Me.tableピッキングリスト.納期Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableピッキングリスト.納期Column) = value
            End Set
        End Property
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.tableピッキングリスト.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableピッキングリスト.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableピッキングリスト.数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableピッキングリスト.数量Column) = value
            End Set
        End Property
        
        Public Property 備考 As String
            Get
                Try 
                    Return CType(Me(Me.tableピッキングリスト.備考Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableピッキングリスト.備考Column) = value
            End Set
        End Property
        
        Public Function Is顧客名Null() As Boolean
            Return Me.IsNull(Me.tableピッキングリスト.顧客名Column)
        End Function
        
        Public Sub Set顧客名Null()
            Me(Me.tableピッキングリスト.顧客名Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is納期Null() As Boolean
            Return Me.IsNull(Me.tableピッキングリスト.納期Column)
        End Function
        
        Public Sub Set納期Null()
            Me(Me.tableピッキングリスト.納期Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.tableピッキングリスト.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.tableピッキングリスト.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量Null() As Boolean
            Return Me.IsNull(Me.tableピッキングリスト.数量Column)
        End Function
        
        Public Sub Set数量Null()
            Me(Me.tableピッキングリスト.数量Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is備考Null() As Boolean
            Return Me.IsNull(Me.tableピッキングリスト.備考Column)
        End Function
        
        Public Sub Set備考Null()
            Me(Me.tableピッキングリスト.備考Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ピッキングリストRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ピッキングリストRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ピッキングリストRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ピッキングリストRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 欠品リストDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column製造区分 As DataColumn
        
        Private columnパーツ名称 As DataColumn
        
        Private column欠品数量 As DataColumn
        
        Friend Sub New()
            MyBase.New("欠品リスト")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 製造区分Column As DataColumn
            Get
                Return Me.column製造区分
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 欠品数量Column As DataColumn
            Get
                Return Me.column欠品数量
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 欠品リストRow
            Get
                Return CType(Me.Rows(index),欠品リストRow)
            End Get
        End Property
        
        Public Event 欠品リストRowChanged As 欠品リストRowChangeEventHandler
        
        Public Event 欠品リストRowChanging As 欠品リストRowChangeEventHandler
        
        Public Event 欠品リストRowDeleted As 欠品リストRowChangeEventHandler
        
        Public Event 欠品リストRowDeleting As 欠品リストRowChangeEventHandler
        
        Public Overloads Sub Add欠品リストRow(ByVal row As 欠品リストRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add欠品リストRow(ByVal 製造区分 As String, ByVal パーツ名称 As String, ByVal 欠品数量 As Integer) As 欠品リストRow
            Dim row欠品リストRow As 欠品リストRow = CType(Me.NewRow,欠品リストRow)
            row欠品リストRow.ItemArray = New Object() {製造区分, パーツ名称, 欠品数量}
            Me.Rows.Add(row欠品リストRow)
            Return row欠品リストRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 欠品リストDataTable = CType(MyBase.Clone,欠品リストDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 欠品リストDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column製造区分 = Me.Columns("製造区分")
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column欠品数量 = Me.Columns("欠品数量")
        End Sub
        
        Private Sub InitClass()
            Me.column製造区分 = New DataColumn("製造区分", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column製造区分)
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column欠品数量 = New DataColumn("欠品数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column欠品数量)
        End Sub
        
        Public Function New欠品リストRow() As 欠品リストRow
            Return CType(Me.NewRow,欠品リストRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 欠品リストRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(欠品リストRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.欠品リストRowChangedEvent) Is Nothing) Then
                RaiseEvent 欠品リストRowChanged(Me, New 欠品リストRowChangeEvent(CType(e.Row,欠品リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.欠品リストRowChangingEvent) Is Nothing) Then
                RaiseEvent 欠品リストRowChanging(Me, New 欠品リストRowChangeEvent(CType(e.Row,欠品リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.欠品リストRowDeletedEvent) Is Nothing) Then
                RaiseEvent 欠品リストRowDeleted(Me, New 欠品リストRowChangeEvent(CType(e.Row,欠品リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.欠品リストRowDeletingEvent) Is Nothing) Then
                RaiseEvent 欠品リストRowDeleting(Me, New 欠品リストRowChangeEvent(CType(e.Row,欠品リストRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove欠品リストRow(ByVal row As 欠品リストRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 欠品リストRow
        Inherits DataRow
        
        Private table欠品リスト As 欠品リストDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table欠品リスト = CType(Me.Table,欠品リストDataTable)
        End Sub
        
        Public Property 製造区分 As String
            Get
                Try 
                    Return CType(Me(Me.table欠品リスト.製造区分Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table欠品リスト.製造区分Column) = value
            End Set
        End Property
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.table欠品リスト.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table欠品リスト.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 欠品数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.table欠品リスト.欠品数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table欠品リスト.欠品数量Column) = value
            End Set
        End Property
        
        Public Function Is製造区分Null() As Boolean
            Return Me.IsNull(Me.table欠品リスト.製造区分Column)
        End Function
        
        Public Sub Set製造区分Null()
            Me(Me.table欠品リスト.製造区分Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.table欠品リスト.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.table欠品リスト.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is欠品数量Null() As Boolean
            Return Me.IsNull(Me.table欠品リスト.欠品数量Column)
        End Function
        
        Public Sub Set欠品数量Null()
            Me(Me.table欠品リスト.欠品数量Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 欠品リストRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 欠品リストRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 欠品リストRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 欠品リストRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 発注点警告リストDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column製造区分 As DataColumn
        
        Private column発注点警告日 As DataColumn
        
        Private columnパーツ名称 As DataColumn
        
        Private column発注点数量 As DataColumn
        
        Private column在庫比率 As DataColumn
        
        Private column現在庫数 As DataColumn
        
        Private column備考 As DataColumn
        
        Friend Sub New()
            MyBase.New("発注点警告リスト")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 製造区分Column As DataColumn
            Get
                Return Me.column製造区分
            End Get
        End Property
        
        Friend ReadOnly Property 発注点警告日Column As DataColumn
            Get
                Return Me.column発注点警告日
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 発注点数量Column As DataColumn
            Get
                Return Me.column発注点数量
            End Get
        End Property
        
        Friend ReadOnly Property 在庫比率Column As DataColumn
            Get
                Return Me.column在庫比率
            End Get
        End Property
        
        Friend ReadOnly Property 現在庫数Column As DataColumn
            Get
                Return Me.column現在庫数
            End Get
        End Property
        
        Friend ReadOnly Property 備考Column As DataColumn
            Get
                Return Me.column備考
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 発注点警告リストRow
            Get
                Return CType(Me.Rows(index),発注点警告リストRow)
            End Get
        End Property
        
        Public Event 発注点警告リストRowChanged As 発注点警告リストRowChangeEventHandler
        
        Public Event 発注点警告リストRowChanging As 発注点警告リストRowChangeEventHandler
        
        Public Event 発注点警告リストRowDeleted As 発注点警告リストRowChangeEventHandler
        
        Public Event 発注点警告リストRowDeleting As 発注点警告リストRowChangeEventHandler
        
        Public Overloads Sub Add発注点警告リストRow(ByVal row As 発注点警告リストRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add発注点警告リストRow(ByVal 製造区分 As String, ByVal 発注点警告日 As Date, ByVal パーツ名称 As String, ByVal 発注点数量 As Integer, ByVal 在庫比率 As Integer, ByVal 現在庫数 As Integer, ByVal 備考 As String) As 発注点警告リストRow
            Dim row発注点警告リストRow As 発注点警告リストRow = CType(Me.NewRow,発注点警告リストRow)
            row発注点警告リストRow.ItemArray = New Object() {製造区分, 発注点警告日, パーツ名称, 発注点数量, 在庫比率, 現在庫数, 備考}
            Me.Rows.Add(row発注点警告リストRow)
            Return row発注点警告リストRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 発注点警告リストDataTable = CType(MyBase.Clone,発注点警告リストDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 発注点警告リストDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column製造区分 = Me.Columns("製造区分")
            Me.column発注点警告日 = Me.Columns("発注点警告日")
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column発注点数量 = Me.Columns("発注点数量")
            Me.column在庫比率 = Me.Columns("在庫比率")
            Me.column現在庫数 = Me.Columns("現在庫数")
            Me.column備考 = Me.Columns("備考")
        End Sub
        
        Private Sub InitClass()
            Me.column製造区分 = New DataColumn("製造区分", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column製造区分)
            Me.column発注点警告日 = New DataColumn("発注点警告日", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column発注点警告日)
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column発注点数量 = New DataColumn("発注点数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column発注点数量)
            Me.column在庫比率 = New DataColumn("在庫比率", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column在庫比率)
            Me.column現在庫数 = New DataColumn("現在庫数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column現在庫数)
            Me.column備考 = New DataColumn("備考", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column備考)
        End Sub
        
        Public Function New発注点警告リストRow() As 発注点警告リストRow
            Return CType(Me.NewRow,発注点警告リストRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 発注点警告リストRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(発注点警告リストRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.発注点警告リストRowChangedEvent) Is Nothing) Then
                RaiseEvent 発注点警告リストRowChanged(Me, New 発注点警告リストRowChangeEvent(CType(e.Row,発注点警告リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.発注点警告リストRowChangingEvent) Is Nothing) Then
                RaiseEvent 発注点警告リストRowChanging(Me, New 発注点警告リストRowChangeEvent(CType(e.Row,発注点警告リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.発注点警告リストRowDeletedEvent) Is Nothing) Then
                RaiseEvent 発注点警告リストRowDeleted(Me, New 発注点警告リストRowChangeEvent(CType(e.Row,発注点警告リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.発注点警告リストRowDeletingEvent) Is Nothing) Then
                RaiseEvent 発注点警告リストRowDeleting(Me, New 発注点警告リストRowChangeEvent(CType(e.Row,発注点警告リストRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove発注点警告リストRow(ByVal row As 発注点警告リストRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 発注点警告リストRow
        Inherits DataRow
        
        Private table発注点警告リスト As 発注点警告リストDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table発注点警告リスト = CType(Me.Table,発注点警告リストDataTable)
        End Sub
        
        Public Property 製造区分 As String
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.製造区分Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.製造区分Column) = value
            End Set
        End Property
        
        Public Property 発注点警告日 As Date
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.発注点警告日Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.発注点警告日Column) = value
            End Set
        End Property
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 発注点数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.発注点数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.発注点数量Column) = value
            End Set
        End Property
        
        Public Property 在庫比率 As Integer
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.在庫比率Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.在庫比率Column) = value
            End Set
        End Property
        
        Public Property 現在庫数 As Integer
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.現在庫数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.現在庫数Column) = value
            End Set
        End Property
        
        Public Property 備考 As String
            Get
                Try 
                    Return CType(Me(Me.table発注点警告リスト.備考Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table発注点警告リスト.備考Column) = value
            End Set
        End Property
        
        Public Function Is製造区分Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.製造区分Column)
        End Function
        
        Public Sub Set製造区分Null()
            Me(Me.table発注点警告リスト.製造区分Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is発注点警告日Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.発注点警告日Column)
        End Function
        
        Public Sub Set発注点警告日Null()
            Me(Me.table発注点警告リスト.発注点警告日Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.table発注点警告リスト.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is発注点数量Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.発注点数量Column)
        End Function
        
        Public Sub Set発注点数量Null()
            Me(Me.table発注点警告リスト.発注点数量Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is在庫比率Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.在庫比率Column)
        End Function
        
        Public Sub Set在庫比率Null()
            Me(Me.table発注点警告リスト.在庫比率Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is現在庫数Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.現在庫数Column)
        End Function
        
        Public Sub Set現在庫数Null()
            Me(Me.table発注点警告リスト.現在庫数Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is備考Null() As Boolean
            Return Me.IsNull(Me.table発注点警告リスト.備考Column)
        End Function
        
        Public Sub Set備考Null()
            Me(Me.table発注点警告リスト.備考Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 発注点警告リストRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 発注点警告リストRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 発注点警告リストRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 発注点警告リストRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫リストDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnパーツ種別名 As DataColumn
        
        Private columnパーツ名称 As DataColumn
        
        Private column現在庫数 As DataColumn
        
        Private column備考 As DataColumn
        
        Friend Sub New()
            MyBase.New("パーツ在庫リスト")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property パーツ種別名Column As DataColumn
            Get
                Return Me.columnパーツ種別名
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 現在庫数Column As DataColumn
            Get
                Return Me.column現在庫数
            End Get
        End Property
        
        Friend ReadOnly Property 備考Column As DataColumn
            Get
                Return Me.column備考
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As パーツ在庫リストRow
            Get
                Return CType(Me.Rows(index),パーツ在庫リストRow)
            End Get
        End Property
        
        Public Event パーツ在庫リストRowChanged As パーツ在庫リストRowChangeEventHandler
        
        Public Event パーツ在庫リストRowChanging As パーツ在庫リストRowChangeEventHandler
        
        Public Event パーツ在庫リストRowDeleted As パーツ在庫リストRowChangeEventHandler
        
        Public Event パーツ在庫リストRowDeleting As パーツ在庫リストRowChangeEventHandler
        
        Public Overloads Sub Addパーツ在庫リストRow(ByVal row As パーツ在庫リストRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addパーツ在庫リストRow(ByVal パーツ種別名 As String, ByVal パーツ名称 As String, ByVal 現在庫数 As Integer, ByVal 備考 As String) As パーツ在庫リストRow
            Dim rowパーツ在庫リストRow As パーツ在庫リストRow = CType(Me.NewRow,パーツ在庫リストRow)
            rowパーツ在庫リストRow.ItemArray = New Object() {パーツ種別名, パーツ名称, 現在庫数, 備考}
            Me.Rows.Add(rowパーツ在庫リストRow)
            Return rowパーツ在庫リストRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As パーツ在庫リストDataTable = CType(MyBase.Clone,パーツ在庫リストDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New パーツ在庫リストDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnパーツ種別名 = Me.Columns("パーツ種別名")
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column現在庫数 = Me.Columns("現在庫数")
            Me.column備考 = Me.Columns("備考")
        End Sub
        
        Private Sub InitClass()
            Me.columnパーツ種別名 = New DataColumn("パーツ種別名", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ種別名)
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column現在庫数 = New DataColumn("現在庫数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column現在庫数)
            Me.column備考 = New DataColumn("備考", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column備考)
        End Sub
        
        Public Function Newパーツ在庫リストRow() As パーツ在庫リストRow
            Return CType(Me.NewRow,パーツ在庫リストRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New パーツ在庫リストRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(パーツ在庫リストRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.パーツ在庫リストRowChangedEvent) Is Nothing) Then
                RaiseEvent パーツ在庫リストRowChanged(Me, New パーツ在庫リストRowChangeEvent(CType(e.Row,パーツ在庫リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.パーツ在庫リストRowChangingEvent) Is Nothing) Then
                RaiseEvent パーツ在庫リストRowChanging(Me, New パーツ在庫リストRowChangeEvent(CType(e.Row,パーツ在庫リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.パーツ在庫リストRowDeletedEvent) Is Nothing) Then
                RaiseEvent パーツ在庫リストRowDeleted(Me, New パーツ在庫リストRowChangeEvent(CType(e.Row,パーツ在庫リストRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.パーツ在庫リストRowDeletingEvent) Is Nothing) Then
                RaiseEvent パーツ在庫リストRowDeleting(Me, New パーツ在庫リストRowChangeEvent(CType(e.Row,パーツ在庫リストRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeパーツ在庫リストRow(ByVal row As パーツ在庫リストRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫リストRow
        Inherits DataRow
        
        Private tableパーツ在庫リスト As パーツ在庫リストDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableパーツ在庫リスト = CType(Me.Table,パーツ在庫リストDataTable)
        End Sub
        
        Public Property パーツ種別名 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ在庫リスト.パーツ種別名Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ在庫リスト.パーツ種別名Column) = value
            End Set
        End Property
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ在庫リスト.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ在庫リスト.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 現在庫数 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ在庫リスト.現在庫数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ在庫リスト.現在庫数Column) = value
            End Set
        End Property
        
        Public Property 備考 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ在庫リスト.備考Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ在庫リスト.備考Column) = value
            End Set
        End Property
        
        Public Function Isパーツ種別名Null() As Boolean
            Return Me.IsNull(Me.tableパーツ在庫リスト.パーツ種別名Column)
        End Function
        
        Public Sub Setパーツ種別名Null()
            Me(Me.tableパーツ在庫リスト.パーツ種別名Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.tableパーツ在庫リスト.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.tableパーツ在庫リスト.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is現在庫数Null() As Boolean
            Return Me.IsNull(Me.tableパーツ在庫リスト.現在庫数Column)
        End Function
        
        Public Sub Set現在庫数Null()
            Me(Me.tableパーツ在庫リスト.現在庫数Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is備考Null() As Boolean
            Return Me.IsNull(Me.tableパーツ在庫リスト.備考Column)
        End Function
        
        Public Sub Set備考Null()
            Me(Me.tableパーツ在庫リスト.備考Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫リストRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As パーツ在庫リストRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As パーツ在庫リストRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As パーツ在庫リストRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 棚卸入力DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnパーツ名称 As DataColumn
        
        Private column現在庫数 As DataColumn
        
        Private column実棚卸数 As DataColumn
        
        Private column差異 As DataColumn
        
        Private column棚卸した日 As DataColumn
        
        Friend Sub New()
            MyBase.New("棚卸入力")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 現在庫数Column As DataColumn
            Get
                Return Me.column現在庫数
            End Get
        End Property
        
        Friend ReadOnly Property 実棚卸数Column As DataColumn
            Get
                Return Me.column実棚卸数
            End Get
        End Property
        
        Friend ReadOnly Property 差異Column As DataColumn
            Get
                Return Me.column差異
            End Get
        End Property
        
        Friend ReadOnly Property 棚卸した日Column As DataColumn
            Get
                Return Me.column棚卸した日
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 棚卸入力Row
            Get
                Return CType(Me.Rows(index),棚卸入力Row)
            End Get
        End Property
        
        Public Event 棚卸入力RowChanged As 棚卸入力RowChangeEventHandler
        
        Public Event 棚卸入力RowChanging As 棚卸入力RowChangeEventHandler
        
        Public Event 棚卸入力RowDeleted As 棚卸入力RowChangeEventHandler
        
        Public Event 棚卸入力RowDeleting As 棚卸入力RowChangeEventHandler
        
        Public Overloads Sub Add棚卸入力Row(ByVal row As 棚卸入力Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add棚卸入力Row(ByVal パーツ名称 As String, ByVal 現在庫数 As Integer, ByVal 実棚卸数 As Integer, ByVal 差異 As Integer, ByVal 棚卸した日 As Date) As 棚卸入力Row
            Dim row棚卸入力Row As 棚卸入力Row = CType(Me.NewRow,棚卸入力Row)
            row棚卸入力Row.ItemArray = New Object() {パーツ名称, 現在庫数, 実棚卸数, 差異, 棚卸した日}
            Me.Rows.Add(row棚卸入力Row)
            Return row棚卸入力Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 棚卸入力DataTable = CType(MyBase.Clone,棚卸入力DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 棚卸入力DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column現在庫数 = Me.Columns("現在庫数")
            Me.column実棚卸数 = Me.Columns("実棚卸数")
            Me.column差異 = Me.Columns("差異")
            Me.column棚卸した日 = Me.Columns("棚卸した日")
        End Sub
        
        Private Sub InitClass()
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column現在庫数 = New DataColumn("現在庫数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column現在庫数)
            Me.column実棚卸数 = New DataColumn("実棚卸数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column実棚卸数)
            Me.column差異 = New DataColumn("差異", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column差異)
            Me.column棚卸した日 = New DataColumn("棚卸した日", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column棚卸した日)
        End Sub
        
        Public Function New棚卸入力Row() As 棚卸入力Row
            Return CType(Me.NewRow,棚卸入力Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 棚卸入力Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(棚卸入力Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.棚卸入力RowChangedEvent) Is Nothing) Then
                RaiseEvent 棚卸入力RowChanged(Me, New 棚卸入力RowChangeEvent(CType(e.Row,棚卸入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.棚卸入力RowChangingEvent) Is Nothing) Then
                RaiseEvent 棚卸入力RowChanging(Me, New 棚卸入力RowChangeEvent(CType(e.Row,棚卸入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.棚卸入力RowDeletedEvent) Is Nothing) Then
                RaiseEvent 棚卸入力RowDeleted(Me, New 棚卸入力RowChangeEvent(CType(e.Row,棚卸入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.棚卸入力RowDeletingEvent) Is Nothing) Then
                RaiseEvent 棚卸入力RowDeleting(Me, New 棚卸入力RowChangeEvent(CType(e.Row,棚卸入力Row), e.Action))
            End If
        End Sub
        
        Public Sub Remove棚卸入力Row(ByVal row As 棚卸入力Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 棚卸入力Row
        Inherits DataRow
        
        Private table棚卸入力 As 棚卸入力DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table棚卸入力 = CType(Me.Table,棚卸入力DataTable)
        End Sub
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.table棚卸入力.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table棚卸入力.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 現在庫数 As Integer
            Get
                Try 
                    Return CType(Me(Me.table棚卸入力.現在庫数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table棚卸入力.現在庫数Column) = value
            End Set
        End Property
        
        Public Property 実棚卸数 As Integer
            Get
                Try 
                    Return CType(Me(Me.table棚卸入力.実棚卸数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table棚卸入力.実棚卸数Column) = value
            End Set
        End Property
        
        Public Property 差異 As Integer
            Get
                Try 
                    Return CType(Me(Me.table棚卸入力.差異Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table棚卸入力.差異Column) = value
            End Set
        End Property
        
        Public Property 棚卸した日 As Date
            Get
                Try 
                    Return CType(Me(Me.table棚卸入力.棚卸した日Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table棚卸入力.棚卸した日Column) = value
            End Set
        End Property
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.table棚卸入力.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.table棚卸入力.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is現在庫数Null() As Boolean
            Return Me.IsNull(Me.table棚卸入力.現在庫数Column)
        End Function
        
        Public Sub Set現在庫数Null()
            Me(Me.table棚卸入力.現在庫数Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is実棚卸数Null() As Boolean
            Return Me.IsNull(Me.table棚卸入力.実棚卸数Column)
        End Function
        
        Public Sub Set実棚卸数Null()
            Me(Me.table棚卸入力.実棚卸数Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is差異Null() As Boolean
            Return Me.IsNull(Me.table棚卸入力.差異Column)
        End Function
        
        Public Sub Set差異Null()
            Me(Me.table棚卸入力.差異Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is棚卸した日Null() As Boolean
            Return Me.IsNull(Me.table棚卸入力.棚卸した日Column)
        End Function
        
        Public Sub Set棚卸した日Null()
            Me(Me.table棚卸入力.棚卸した日Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 棚卸入力RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 棚卸入力Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 棚卸入力Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 棚卸入力Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注明細DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column受注番号 As DataColumn
        
        Private column商品名称 As DataColumn
        
        Private column受注数量 As DataColumn
        
        Private column顧客コード As DataColumn
        
        Private column受注日 As DataColumn
        
        Private column納期 As DataColumn
        
        Private column標準商品名称 As DataColumn
        
        Friend Sub New()
            MyBase.New("受注明細")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 受注番号Column As DataColumn
            Get
                Return Me.column受注番号
            End Get
        End Property
        
        Friend ReadOnly Property 商品名称Column As DataColumn
            Get
                Return Me.column商品名称
            End Get
        End Property
        
        Friend ReadOnly Property 受注数量Column As DataColumn
            Get
                Return Me.column受注数量
            End Get
        End Property
        
        Friend ReadOnly Property 顧客コードColumn As DataColumn
            Get
                Return Me.column顧客コード
            End Get
        End Property
        
        Friend ReadOnly Property 受注日Column As DataColumn
            Get
                Return Me.column受注日
            End Get
        End Property
        
        Friend ReadOnly Property 納期Column As DataColumn
            Get
                Return Me.column納期
            End Get
        End Property
        
        Friend ReadOnly Property 標準商品名称Column As DataColumn
            Get
                Return Me.column標準商品名称
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 受注明細Row
            Get
                Return CType(Me.Rows(index),受注明細Row)
            End Get
        End Property
        
        Public Event 受注明細RowChanged As 受注明細RowChangeEventHandler
        
        Public Event 受注明細RowChanging As 受注明細RowChangeEventHandler
        
        Public Event 受注明細RowDeleted As 受注明細RowChangeEventHandler
        
        Public Event 受注明細RowDeleting As 受注明細RowChangeEventHandler
        
        Public Overloads Sub Add受注明細Row(ByVal row As 受注明細Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add受注明細Row(ByVal 受注番号 As String, ByVal 商品名称 As String, ByVal 受注数量 As Integer, ByVal 顧客コード As String, ByVal 受注日 As Date, ByVal 納期 As Date, ByVal 標準商品名称 As String) As 受注明細Row
            Dim row受注明細Row As 受注明細Row = CType(Me.NewRow,受注明細Row)
            row受注明細Row.ItemArray = New Object() {受注番号, 商品名称, 受注数量, 顧客コード, 受注日, 納期, 標準商品名称}
            Me.Rows.Add(row受注明細Row)
            Return row受注明細Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 受注明細DataTable = CType(MyBase.Clone,受注明細DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 受注明細DataTable
        End Function
        
        Friend Sub InitVars()
            Me.column受注番号 = Me.Columns("受注番号")
            Me.column商品名称 = Me.Columns("商品名称")
            Me.column受注数量 = Me.Columns("受注数量")
            Me.column顧客コード = Me.Columns("顧客コード")
            Me.column受注日 = Me.Columns("受注日")
            Me.column納期 = Me.Columns("納期")
            Me.column標準商品名称 = Me.Columns("標準商品名称")
        End Sub
        
        Private Sub InitClass()
            Me.column受注番号 = New DataColumn("受注番号", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column受注番号)
            Me.column商品名称 = New DataColumn("商品名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column商品名称)
            Me.column受注数量 = New DataColumn("受注数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column受注数量)
            Me.column顧客コード = New DataColumn("顧客コード", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column顧客コード)
            Me.column受注日 = New DataColumn("受注日", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column受注日)
            Me.column納期 = New DataColumn("納期", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column納期)
            Me.column標準商品名称 = New DataColumn("標準商品名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column標準商品名称)
        End Sub
        
        Public Function New受注明細Row() As 受注明細Row
            Return CType(Me.NewRow,受注明細Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 受注明細Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(受注明細Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.受注明細RowChangedEvent) Is Nothing) Then
                RaiseEvent 受注明細RowChanged(Me, New 受注明細RowChangeEvent(CType(e.Row,受注明細Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.受注明細RowChangingEvent) Is Nothing) Then
                RaiseEvent 受注明細RowChanging(Me, New 受注明細RowChangeEvent(CType(e.Row,受注明細Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.受注明細RowDeletedEvent) Is Nothing) Then
                RaiseEvent 受注明細RowDeleted(Me, New 受注明細RowChangeEvent(CType(e.Row,受注明細Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.受注明細RowDeletingEvent) Is Nothing) Then
                RaiseEvent 受注明細RowDeleting(Me, New 受注明細RowChangeEvent(CType(e.Row,受注明細Row), e.Action))
            End If
        End Sub
        
        Public Sub Remove受注明細Row(ByVal row As 受注明細Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注明細Row
        Inherits DataRow
        
        Private table受注明細 As 受注明細DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table受注明細 = CType(Me.Table,受注明細DataTable)
        End Sub
        
        Public Property 受注番号 As String
            Get
                Try 
                    Return CType(Me(Me.table受注明細.受注番号Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.受注番号Column) = value
            End Set
        End Property
        
        Public Property 商品名称 As String
            Get
                Try 
                    Return CType(Me(Me.table受注明細.商品名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.商品名称Column) = value
            End Set
        End Property
        
        Public Property 受注数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.table受注明細.受注数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.受注数量Column) = value
            End Set
        End Property
        
        Public Property 顧客コード As String
            Get
                Try 
                    Return CType(Me(Me.table受注明細.顧客コードColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.顧客コードColumn) = value
            End Set
        End Property
        
        Public Property 受注日 As Date
            Get
                Try 
                    Return CType(Me(Me.table受注明細.受注日Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.受注日Column) = value
            End Set
        End Property
        
        Public Property 納期 As Date
            Get
                Try 
                    Return CType(Me(Me.table受注明細.納期Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.納期Column) = value
            End Set
        End Property
        
        Public Property 標準商品名称 As String
            Get
                Try 
                    Return CType(Me(Me.table受注明細.標準商品名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注明細.標準商品名称Column) = value
            End Set
        End Property
        
        Public Function Is受注番号Null() As Boolean
            Return Me.IsNull(Me.table受注明細.受注番号Column)
        End Function
        
        Public Sub Set受注番号Null()
            Me(Me.table受注明細.受注番号Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is商品名称Null() As Boolean
            Return Me.IsNull(Me.table受注明細.商品名称Column)
        End Function
        
        Public Sub Set商品名称Null()
            Me(Me.table受注明細.商品名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is受注数量Null() As Boolean
            Return Me.IsNull(Me.table受注明細.受注数量Column)
        End Function
        
        Public Sub Set受注数量Null()
            Me(Me.table受注明細.受注数量Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is顧客コードNull() As Boolean
            Return Me.IsNull(Me.table受注明細.顧客コードColumn)
        End Function
        
        Public Sub Set顧客コードNull()
            Me(Me.table受注明細.顧客コードColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is受注日Null() As Boolean
            Return Me.IsNull(Me.table受注明細.受注日Column)
        End Function
        
        Public Sub Set受注日Null()
            Me(Me.table受注明細.受注日Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is納期Null() As Boolean
            Return Me.IsNull(Me.table受注明細.納期Column)
        End Function
        
        Public Sub Set納期Null()
            Me(Me.table受注明細.納期Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is標準商品名称Null() As Boolean
            Return Me.IsNull(Me.table受注明細.標準商品名称Column)
        End Function
        
        Public Sub Set標準商品名称Null()
            Me(Me.table受注明細.標準商品名称Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注明細RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 受注明細Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 受注明細Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 受注明細Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 入出庫入力DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnパーツ名称 As DataColumn
        
        Private column現在庫数 As DataColumn
        
        Friend Sub New()
            MyBase.New("入出庫入力")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 現在庫数Column As DataColumn
            Get
                Return Me.column現在庫数
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 入出庫入力Row
            Get
                Return CType(Me.Rows(index),入出庫入力Row)
            End Get
        End Property
        
        Public Event 入出庫入力RowChanged As 入出庫入力RowChangeEventHandler
        
        Public Event 入出庫入力RowChanging As 入出庫入力RowChangeEventHandler
        
        Public Event 入出庫入力RowDeleted As 入出庫入力RowChangeEventHandler
        
        Public Event 入出庫入力RowDeleting As 入出庫入力RowChangeEventHandler
        
        Public Overloads Sub Add入出庫入力Row(ByVal row As 入出庫入力Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add入出庫入力Row(ByVal パーツ名称 As String, ByVal 現在庫数 As Integer) As 入出庫入力Row
            Dim row入出庫入力Row As 入出庫入力Row = CType(Me.NewRow,入出庫入力Row)
            row入出庫入力Row.ItemArray = New Object() {パーツ名称, 現在庫数}
            Me.Rows.Add(row入出庫入力Row)
            Return row入出庫入力Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 入出庫入力DataTable = CType(MyBase.Clone,入出庫入力DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 入出庫入力DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column現在庫数 = Me.Columns("現在庫数")
        End Sub
        
        Private Sub InitClass()
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column現在庫数 = New DataColumn("現在庫数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column現在庫数)
        End Sub
        
        Public Function New入出庫入力Row() As 入出庫入力Row
            Return CType(Me.NewRow,入出庫入力Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 入出庫入力Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(入出庫入力Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.入出庫入力RowChangedEvent) Is Nothing) Then
                RaiseEvent 入出庫入力RowChanged(Me, New 入出庫入力RowChangeEvent(CType(e.Row,入出庫入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.入出庫入力RowChangingEvent) Is Nothing) Then
                RaiseEvent 入出庫入力RowChanging(Me, New 入出庫入力RowChangeEvent(CType(e.Row,入出庫入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.入出庫入力RowDeletedEvent) Is Nothing) Then
                RaiseEvent 入出庫入力RowDeleted(Me, New 入出庫入力RowChangeEvent(CType(e.Row,入出庫入力Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.入出庫入力RowDeletingEvent) Is Nothing) Then
                RaiseEvent 入出庫入力RowDeleting(Me, New 入出庫入力RowChangeEvent(CType(e.Row,入出庫入力Row), e.Action))
            End If
        End Sub
        
        Public Sub Remove入出庫入力Row(ByVal row As 入出庫入力Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 入出庫入力Row
        Inherits DataRow
        
        Private table入出庫入力 As 入出庫入力DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table入出庫入力 = CType(Me.Table,入出庫入力DataTable)
        End Sub
        
        Public Property パーツ名称 As String
            Get
                Try 
                    Return CType(Me(Me.table入出庫入力.パーツ名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table入出庫入力.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 現在庫数 As Integer
            Get
                Try 
                    Return CType(Me(Me.table入出庫入力.現在庫数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table入出庫入力.現在庫数Column) = value
            End Set
        End Property
        
        Public Function Isパーツ名称Null() As Boolean
            Return Me.IsNull(Me.table入出庫入力.パーツ名称Column)
        End Function
        
        Public Sub Setパーツ名称Null()
            Me(Me.table入出庫入力.パーツ名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is現在庫数Null() As Boolean
            Return Me.IsNull(Me.table入出庫入力.現在庫数Column)
        End Function
        
        Public Sub Set現在庫数Null()
            Me(Me.table入出庫入力.現在庫数Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 入出庫入力RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 入出庫入力Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 入出庫入力Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 入出庫入力Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ展開DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column受注番号 As DataColumn
        
        Private column商品名称 As DataColumn
        
        Private column受注数量 As DataColumn
        
        Private columnパーツ1 As DataColumn
        
        Private column数量1 As DataColumn
        
        Private columnパーツ2 As DataColumn
        
        Private column数量2 As DataColumn
        
        Private columnパーツ3 As DataColumn
        
        Private column数量3 As DataColumn
        
        Private columnパーツ4 As DataColumn
        
        Private column数量4 As DataColumn
        
        Private columnパーツ5 As DataColumn
        
        Private column数量5 As DataColumn
        
        Private columnパーツ6 As DataColumn
        
        Private column数量6 As DataColumn
        
        Private columnパーツ7 As DataColumn
        
        Private column数量7 As DataColumn
        
        Private columnパーツ8 As DataColumn
        
        Private column数量8 As DataColumn
        
        Private columnパーツ9 As DataColumn
        
        Private column数量9 As DataColumn
        
        Private columnパーツ10 As DataColumn
        
        Private column数量10 As DataColumn
        
        Private columnパーツ11 As DataColumn
        
        Private column数量11 As DataColumn
        
        Private columnパーツ12 As DataColumn
        
        Private column数量12 As DataColumn
        
        Private columnパーツ13 As DataColumn
        
        Private column数量13 As DataColumn
        
        Private columnパーツ14 As DataColumn
        
        Private column数量14 As DataColumn
        
        Private columnパーツ15 As DataColumn
        
        Private column数量15 As DataColumn
        
        Friend Sub New()
            MyBase.New("パーツ展開")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 受注番号Column As DataColumn
            Get
                Return Me.column受注番号
            End Get
        End Property
        
        Friend ReadOnly Property 商品名称Column As DataColumn
            Get
                Return Me.column商品名称
            End Get
        End Property
        
        Friend ReadOnly Property 受注数量Column As DataColumn
            Get
                Return Me.column受注数量
            End Get
        End Property
        
        Friend ReadOnly Property パーツ1Column As DataColumn
            Get
                Return Me.columnパーツ1
            End Get
        End Property
        
        Friend ReadOnly Property 数量1Column As DataColumn
            Get
                Return Me.column数量1
            End Get
        End Property
        
        Friend ReadOnly Property パーツ2Column As DataColumn
            Get
                Return Me.columnパーツ2
            End Get
        End Property
        
        Friend ReadOnly Property 数量2Column As DataColumn
            Get
                Return Me.column数量2
            End Get
        End Property
        
        Friend ReadOnly Property パーツ3Column As DataColumn
            Get
                Return Me.columnパーツ3
            End Get
        End Property
        
        Friend ReadOnly Property 数量3Column As DataColumn
            Get
                Return Me.column数量3
            End Get
        End Property
        
        Friend ReadOnly Property パーツ4Column As DataColumn
            Get
                Return Me.columnパーツ4
            End Get
        End Property
        
        Friend ReadOnly Property 数量4Column As DataColumn
            Get
                Return Me.column数量4
            End Get
        End Property
        
        Friend ReadOnly Property パーツ5Column As DataColumn
            Get
                Return Me.columnパーツ5
            End Get
        End Property
        
        Friend ReadOnly Property 数量5Column As DataColumn
            Get
                Return Me.column数量5
            End Get
        End Property
        
        Friend ReadOnly Property パーツ6Column As DataColumn
            Get
                Return Me.columnパーツ6
            End Get
        End Property
        
        Friend ReadOnly Property 数量6Column As DataColumn
            Get
                Return Me.column数量6
            End Get
        End Property
        
        Friend ReadOnly Property パーツ7Column As DataColumn
            Get
                Return Me.columnパーツ7
            End Get
        End Property
        
        Friend ReadOnly Property 数量7Column As DataColumn
            Get
                Return Me.column数量7
            End Get
        End Property
        
        Friend ReadOnly Property パーツ8Column As DataColumn
            Get
                Return Me.columnパーツ8
            End Get
        End Property
        
        Friend ReadOnly Property 数量8Column As DataColumn
            Get
                Return Me.column数量8
            End Get
        End Property
        
        Friend ReadOnly Property パーツ9Column As DataColumn
            Get
                Return Me.columnパーツ9
            End Get
        End Property
        
        Friend ReadOnly Property 数量9Column As DataColumn
            Get
                Return Me.column数量9
            End Get
        End Property
        
        Friend ReadOnly Property パーツ10Column As DataColumn
            Get
                Return Me.columnパーツ10
            End Get
        End Property
        
        Friend ReadOnly Property 数量10Column As DataColumn
            Get
                Return Me.column数量10
            End Get
        End Property
        
        Friend ReadOnly Property パーツ11Column As DataColumn
            Get
                Return Me.columnパーツ11
            End Get
        End Property
        
        Friend ReadOnly Property 数量11Column As DataColumn
            Get
                Return Me.column数量11
            End Get
        End Property
        
        Friend ReadOnly Property パーツ12Column As DataColumn
            Get
                Return Me.columnパーツ12
            End Get
        End Property
        
        Friend ReadOnly Property 数量12Column As DataColumn
            Get
                Return Me.column数量12
            End Get
        End Property
        
        Friend ReadOnly Property パーツ13Column As DataColumn
            Get
                Return Me.columnパーツ13
            End Get
        End Property
        
        Friend ReadOnly Property 数量13Column As DataColumn
            Get
                Return Me.column数量13
            End Get
        End Property
        
        Friend ReadOnly Property パーツ14Column As DataColumn
            Get
                Return Me.columnパーツ14
            End Get
        End Property
        
        Friend ReadOnly Property 数量14Column As DataColumn
            Get
                Return Me.column数量14
            End Get
        End Property
        
        Friend ReadOnly Property パーツ15Column As DataColumn
            Get
                Return Me.columnパーツ15
            End Get
        End Property
        
        Friend ReadOnly Property 数量15Column As DataColumn
            Get
                Return Me.column数量15
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As パーツ展開Row
            Get
                Return CType(Me.Rows(index),パーツ展開Row)
            End Get
        End Property
        
        Public Event パーツ展開RowChanged As パーツ展開RowChangeEventHandler
        
        Public Event パーツ展開RowChanging As パーツ展開RowChangeEventHandler
        
        Public Event パーツ展開RowDeleted As パーツ展開RowChangeEventHandler
        
        Public Event パーツ展開RowDeleting As パーツ展開RowChangeEventHandler
        
        Public Overloads Sub Addパーツ展開Row(ByVal row As パーツ展開Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addパーツ展開Row( _
                    ByVal 受注番号 As String,  _
                    ByVal 商品名称 As String,  _
                    ByVal 受注数量 As Integer,  _
                    ByVal パーツ1 As String,  _
                    ByVal 数量1 As Integer,  _
                    ByVal パーツ2 As String,  _
                    ByVal 数量2 As Integer,  _
                    ByVal パーツ3 As String,  _
                    ByVal 数量3 As Integer,  _
                    ByVal パーツ4 As String,  _
                    ByVal 数量4 As Integer,  _
                    ByVal パーツ5 As String,  _
                    ByVal 数量5 As Integer,  _
                    ByVal パーツ6 As String,  _
                    ByVal 数量6 As Integer,  _
                    ByVal パーツ7 As String,  _
                    ByVal 数量7 As Integer,  _
                    ByVal パーツ8 As String,  _
                    ByVal 数量8 As Integer,  _
                    ByVal パーツ9 As String,  _
                    ByVal 数量9 As Integer,  _
                    ByVal パーツ10 As String,  _
                    ByVal 数量10 As Integer,  _
                    ByVal パーツ11 As String,  _
                    ByVal 数量11 As Integer,  _
                    ByVal パーツ12 As String,  _
                    ByVal 数量12 As Integer,  _
                    ByVal パーツ13 As String,  _
                    ByVal 数量13 As Integer,  _
                    ByVal パーツ14 As String,  _
                    ByVal 数量14 As Integer,  _
                    ByVal パーツ15 As String,  _
                    ByVal 数量15 As Integer) As パーツ展開Row
            Dim rowパーツ展開Row As パーツ展開Row = CType(Me.NewRow,パーツ展開Row)
            rowパーツ展開Row.ItemArray = New Object() {受注番号, 商品名称, 受注数量, パーツ1, 数量1, パーツ2, 数量2, パーツ3, 数量3, パーツ4, 数量4, パーツ5, 数量5, パーツ6, 数量6, パーツ7, 数量7, パーツ8, 数量8, パーツ9, 数量9, パーツ10, 数量10, パーツ11, 数量11, パーツ12, 数量12, パーツ13, 数量13, パーツ14, 数量14, パーツ15, 数量15}
            Me.Rows.Add(rowパーツ展開Row)
            Return rowパーツ展開Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As パーツ展開DataTable = CType(MyBase.Clone,パーツ展開DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New パーツ展開DataTable
        End Function
        
        Friend Sub InitVars()
            Me.column受注番号 = Me.Columns("受注番号")
            Me.column商品名称 = Me.Columns("商品名称")
            Me.column受注数量 = Me.Columns("受注数量")
            Me.columnパーツ1 = Me.Columns("パーツ1")
            Me.column数量1 = Me.Columns("数量1")
            Me.columnパーツ2 = Me.Columns("パーツ2")
            Me.column数量2 = Me.Columns("数量2")
            Me.columnパーツ3 = Me.Columns("パーツ3")
            Me.column数量3 = Me.Columns("数量3")
            Me.columnパーツ4 = Me.Columns("パーツ4")
            Me.column数量4 = Me.Columns("数量4")
            Me.columnパーツ5 = Me.Columns("パーツ5")
            Me.column数量5 = Me.Columns("数量5")
            Me.columnパーツ6 = Me.Columns("パーツ6")
            Me.column数量6 = Me.Columns("数量6")
            Me.columnパーツ7 = Me.Columns("パーツ7")
            Me.column数量7 = Me.Columns("数量7")
            Me.columnパーツ8 = Me.Columns("パーツ8")
            Me.column数量8 = Me.Columns("数量8")
            Me.columnパーツ9 = Me.Columns("パーツ9")
            Me.column数量9 = Me.Columns("数量9")
            Me.columnパーツ10 = Me.Columns("パーツ10")
            Me.column数量10 = Me.Columns("数量10")
            Me.columnパーツ11 = Me.Columns("パーツ11")
            Me.column数量11 = Me.Columns("数量11")
            Me.columnパーツ12 = Me.Columns("パーツ12")
            Me.column数量12 = Me.Columns("数量12")
            Me.columnパーツ13 = Me.Columns("パーツ13")
            Me.column数量13 = Me.Columns("数量13")
            Me.columnパーツ14 = Me.Columns("パーツ14")
            Me.column数量14 = Me.Columns("数量14")
            Me.columnパーツ15 = Me.Columns("パーツ15")
            Me.column数量15 = Me.Columns("数量15")
        End Sub
        
        Private Sub InitClass()
            Me.column受注番号 = New DataColumn("受注番号", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column受注番号)
            Me.column商品名称 = New DataColumn("商品名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column商品名称)
            Me.column受注数量 = New DataColumn("受注数量", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column受注数量)
            Me.columnパーツ1 = New DataColumn("パーツ1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ1)
            Me.column数量1 = New DataColumn("数量1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量1)
            Me.columnパーツ2 = New DataColumn("パーツ2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ2)
            Me.column数量2 = New DataColumn("数量2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量2)
            Me.columnパーツ3 = New DataColumn("パーツ3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ3)
            Me.column数量3 = New DataColumn("数量3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量3)
            Me.columnパーツ4 = New DataColumn("パーツ4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ4)
            Me.column数量4 = New DataColumn("数量4", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量4)
            Me.columnパーツ5 = New DataColumn("パーツ5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ5)
            Me.column数量5 = New DataColumn("数量5", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量5)
            Me.columnパーツ6 = New DataColumn("パーツ6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ6)
            Me.column数量6 = New DataColumn("数量6", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量6)
            Me.columnパーツ7 = New DataColumn("パーツ7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ7)
            Me.column数量7 = New DataColumn("数量7", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量7)
            Me.columnパーツ8 = New DataColumn("パーツ8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ8)
            Me.column数量8 = New DataColumn("数量8", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量8)
            Me.columnパーツ9 = New DataColumn("パーツ9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ9)
            Me.column数量9 = New DataColumn("数量9", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量9)
            Me.columnパーツ10 = New DataColumn("パーツ10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ10)
            Me.column数量10 = New DataColumn("数量10", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量10)
            Me.columnパーツ11 = New DataColumn("パーツ11", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ11)
            Me.column数量11 = New DataColumn("数量11", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量11)
            Me.columnパーツ12 = New DataColumn("パーツ12", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ12)
            Me.column数量12 = New DataColumn("数量12", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量12)
            Me.columnパーツ13 = New DataColumn("パーツ13", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ13)
            Me.column数量13 = New DataColumn("数量13", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量13)
            Me.columnパーツ14 = New DataColumn("パーツ14", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ14)
            Me.column数量14 = New DataColumn("数量14", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量14)
            Me.columnパーツ15 = New DataColumn("パーツ15", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ15)
            Me.column数量15 = New DataColumn("数量15", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column数量15)
            Me.column受注番号.AllowDBNull = false
        End Sub
        
        Public Function Newパーツ展開Row() As パーツ展開Row
            Return CType(Me.NewRow,パーツ展開Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New パーツ展開Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(パーツ展開Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.パーツ展開RowChangedEvent) Is Nothing) Then
                RaiseEvent パーツ展開RowChanged(Me, New パーツ展開RowChangeEvent(CType(e.Row,パーツ展開Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.パーツ展開RowChangingEvent) Is Nothing) Then
                RaiseEvent パーツ展開RowChanging(Me, New パーツ展開RowChangeEvent(CType(e.Row,パーツ展開Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.パーツ展開RowDeletedEvent) Is Nothing) Then
                RaiseEvent パーツ展開RowDeleted(Me, New パーツ展開RowChangeEvent(CType(e.Row,パーツ展開Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.パーツ展開RowDeletingEvent) Is Nothing) Then
                RaiseEvent パーツ展開RowDeleting(Me, New パーツ展開RowChangeEvent(CType(e.Row,パーツ展開Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeパーツ展開Row(ByVal row As パーツ展開Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ展開Row
        Inherits DataRow
        
        Private tableパーツ展開 As パーツ展開DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableパーツ展開 = CType(Me.Table,パーツ展開DataTable)
        End Sub
        
        Public Property 受注番号 As String
            Get
                Return CType(Me(Me.tableパーツ展開.受注番号Column),String)
            End Get
            Set
                Me(Me.tableパーツ展開.受注番号Column) = value
            End Set
        End Property
        
        Public Property 商品名称 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.商品名称Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.商品名称Column) = value
            End Set
        End Property
        
        Public Property 受注数量 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.受注数量Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.受注数量Column) = value
            End Set
        End Property
        
        Public Property パーツ1 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ1Column) = value
            End Set
        End Property
        
        Public Property 数量1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量1Column) = value
            End Set
        End Property
        
        Public Property パーツ2 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ2Column) = value
            End Set
        End Property
        
        Public Property 数量2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量2Column) = value
            End Set
        End Property
        
        Public Property パーツ3 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ3Column) = value
            End Set
        End Property
        
        Public Property 数量3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量3Column) = value
            End Set
        End Property
        
        Public Property パーツ4 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ4Column) = value
            End Set
        End Property
        
        Public Property 数量4 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量4Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量4Column) = value
            End Set
        End Property
        
        Public Property パーツ5 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ5Column) = value
            End Set
        End Property
        
        Public Property 数量5 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量5Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量5Column) = value
            End Set
        End Property
        
        Public Property パーツ6 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ6Column) = value
            End Set
        End Property
        
        Public Property 数量6 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量6Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量6Column) = value
            End Set
        End Property
        
        Public Property パーツ7 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ7Column) = value
            End Set
        End Property
        
        Public Property 数量7 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量7Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量7Column) = value
            End Set
        End Property
        
        Public Property パーツ8 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ8Column) = value
            End Set
        End Property
        
        Public Property 数量8 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量8Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量8Column) = value
            End Set
        End Property
        
        Public Property パーツ9 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ9Column) = value
            End Set
        End Property
        
        Public Property 数量9 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量9Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量9Column) = value
            End Set
        End Property
        
        Public Property パーツ10 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ10Column) = value
            End Set
        End Property
        
        Public Property 数量10 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量10Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量10Column) = value
            End Set
        End Property
        
        Public Property パーツ11 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ11Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ11Column) = value
            End Set
        End Property
        
        Public Property 数量11 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量11Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量11Column) = value
            End Set
        End Property
        
        Public Property パーツ12 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ12Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ12Column) = value
            End Set
        End Property
        
        Public Property 数量12 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量12Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量12Column) = value
            End Set
        End Property
        
        Public Property パーツ13 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ13Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ13Column) = value
            End Set
        End Property
        
        Public Property 数量13 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量13Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量13Column) = value
            End Set
        End Property
        
        Public Property パーツ14 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ14Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ14Column) = value
            End Set
        End Property
        
        Public Property 数量14 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量14Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量14Column) = value
            End Set
        End Property
        
        Public Property パーツ15 As String
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.パーツ15Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.パーツ15Column) = value
            End Set
        End Property
        
        Public Property 数量15 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ展開.数量15Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ展開.数量15Column) = value
            End Set
        End Property
        
        Public Function Is商品名称Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.商品名称Column)
        End Function
        
        Public Sub Set商品名称Null()
            Me(Me.tableパーツ展開.商品名称Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is受注数量Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.受注数量Column)
        End Function
        
        Public Sub Set受注数量Null()
            Me(Me.tableパーツ展開.受注数量Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ1Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ1Column)
        End Function
        
        Public Sub Setパーツ1Null()
            Me(Me.tableパーツ展開.パーツ1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量1Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量1Column)
        End Function
        
        Public Sub Set数量1Null()
            Me(Me.tableパーツ展開.数量1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ2Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ2Column)
        End Function
        
        Public Sub Setパーツ2Null()
            Me(Me.tableパーツ展開.パーツ2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量2Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量2Column)
        End Function
        
        Public Sub Set数量2Null()
            Me(Me.tableパーツ展開.数量2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ3Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ3Column)
        End Function
        
        Public Sub Setパーツ3Null()
            Me(Me.tableパーツ展開.パーツ3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量3Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量3Column)
        End Function
        
        Public Sub Set数量3Null()
            Me(Me.tableパーツ展開.数量3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ4Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ4Column)
        End Function
        
        Public Sub Setパーツ4Null()
            Me(Me.tableパーツ展開.パーツ4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量4Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量4Column)
        End Function
        
        Public Sub Set数量4Null()
            Me(Me.tableパーツ展開.数量4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ5Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ5Column)
        End Function
        
        Public Sub Setパーツ5Null()
            Me(Me.tableパーツ展開.パーツ5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量5Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量5Column)
        End Function
        
        Public Sub Set数量5Null()
            Me(Me.tableパーツ展開.数量5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ6Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ6Column)
        End Function
        
        Public Sub Setパーツ6Null()
            Me(Me.tableパーツ展開.パーツ6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量6Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量6Column)
        End Function
        
        Public Sub Set数量6Null()
            Me(Me.tableパーツ展開.数量6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ7Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ7Column)
        End Function
        
        Public Sub Setパーツ7Null()
            Me(Me.tableパーツ展開.パーツ7Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量7Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量7Column)
        End Function
        
        Public Sub Set数量7Null()
            Me(Me.tableパーツ展開.数量7Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ8Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ8Column)
        End Function
        
        Public Sub Setパーツ8Null()
            Me(Me.tableパーツ展開.パーツ8Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量8Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量8Column)
        End Function
        
        Public Sub Set数量8Null()
            Me(Me.tableパーツ展開.数量8Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ9Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ9Column)
        End Function
        
        Public Sub Setパーツ9Null()
            Me(Me.tableパーツ展開.パーツ9Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量9Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量9Column)
        End Function
        
        Public Sub Set数量9Null()
            Me(Me.tableパーツ展開.数量9Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ10Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ10Column)
        End Function
        
        Public Sub Setパーツ10Null()
            Me(Me.tableパーツ展開.パーツ10Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量10Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量10Column)
        End Function
        
        Public Sub Set数量10Null()
            Me(Me.tableパーツ展開.数量10Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ11Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ11Column)
        End Function
        
        Public Sub Setパーツ11Null()
            Me(Me.tableパーツ展開.パーツ11Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量11Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量11Column)
        End Function
        
        Public Sub Set数量11Null()
            Me(Me.tableパーツ展開.数量11Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ12Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ12Column)
        End Function
        
        Public Sub Setパーツ12Null()
            Me(Me.tableパーツ展開.パーツ12Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量12Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量12Column)
        End Function
        
        Public Sub Set数量12Null()
            Me(Me.tableパーツ展開.数量12Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ13Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ13Column)
        End Function
        
        Public Sub Setパーツ13Null()
            Me(Me.tableパーツ展開.パーツ13Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量13Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量13Column)
        End Function
        
        Public Sub Set数量13Null()
            Me(Me.tableパーツ展開.数量13Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ14Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ14Column)
        End Function
        
        Public Sub Setパーツ14Null()
            Me(Me.tableパーツ展開.パーツ14Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量14Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量14Column)
        End Function
        
        Public Sub Set数量14Null()
            Me(Me.tableパーツ展開.数量14Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isパーツ15Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.パーツ15Column)
        End Function
        
        Public Sub Setパーツ15Null()
            Me(Me.tableパーツ展開.パーツ15Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is数量15Null() As Boolean
            Return Me.IsNull(Me.tableパーツ展開.数量15Column)
        End Function
        
        Public Sub Set数量15Null()
            Me(Me.tableパーツ展開.数量15Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ展開RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As パーツ展開Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As パーツ展開Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As パーツ展開Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫引当DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnパーツ名称 As DataColumn
        
        Private column引当数 As DataColumn
        
        Friend Sub New()
            MyBase.New("パーツ在庫引当")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property パーツ名称Column As DataColumn
            Get
                Return Me.columnパーツ名称
            End Get
        End Property
        
        Friend ReadOnly Property 引当数Column As DataColumn
            Get
                Return Me.column引当数
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As パーツ在庫引当Row
            Get
                Return CType(Me.Rows(index),パーツ在庫引当Row)
            End Get
        End Property
        
        Public Event パーツ在庫引当RowChanged As パーツ在庫引当RowChangeEventHandler
        
        Public Event パーツ在庫引当RowChanging As パーツ在庫引当RowChangeEventHandler
        
        Public Event パーツ在庫引当RowDeleted As パーツ在庫引当RowChangeEventHandler
        
        Public Event パーツ在庫引当RowDeleting As パーツ在庫引当RowChangeEventHandler
        
        Public Overloads Sub Addパーツ在庫引当Row(ByVal row As パーツ在庫引当Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addパーツ在庫引当Row(ByVal パーツ名称 As String, ByVal 引当数 As Integer) As パーツ在庫引当Row
            Dim rowパーツ在庫引当Row As パーツ在庫引当Row = CType(Me.NewRow,パーツ在庫引当Row)
            rowパーツ在庫引当Row.ItemArray = New Object() {パーツ名称, 引当数}
            Me.Rows.Add(rowパーツ在庫引当Row)
            Return rowパーツ在庫引当Row
        End Function
        
        Public Function FindByパーツ名称(ByVal パーツ名称 As String) As パーツ在庫引当Row
            Return CType(Me.Rows.Find(New Object() {パーツ名称}),パーツ在庫引当Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As パーツ在庫引当DataTable = CType(MyBase.Clone,パーツ在庫引当DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New パーツ在庫引当DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnパーツ名称 = Me.Columns("パーツ名称")
            Me.column引当数 = Me.Columns("引当数")
        End Sub
        
        Private Sub InitClass()
            Me.columnパーツ名称 = New DataColumn("パーツ名称", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnパーツ名称)
            Me.column引当数 = New DataColumn("引当数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column引当数)
            Me.Constraints.Add(New UniqueConstraint("dsWorkKey2", New DataColumn() {Me.columnパーツ名称}, true))
            Me.columnパーツ名称.AllowDBNull = false
            Me.columnパーツ名称.Unique = true
        End Sub
        
        Public Function Newパーツ在庫引当Row() As パーツ在庫引当Row
            Return CType(Me.NewRow,パーツ在庫引当Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New パーツ在庫引当Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(パーツ在庫引当Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.パーツ在庫引当RowChangedEvent) Is Nothing) Then
                RaiseEvent パーツ在庫引当RowChanged(Me, New パーツ在庫引当RowChangeEvent(CType(e.Row,パーツ在庫引当Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.パーツ在庫引当RowChangingEvent) Is Nothing) Then
                RaiseEvent パーツ在庫引当RowChanging(Me, New パーツ在庫引当RowChangeEvent(CType(e.Row,パーツ在庫引当Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.パーツ在庫引当RowDeletedEvent) Is Nothing) Then
                RaiseEvent パーツ在庫引当RowDeleted(Me, New パーツ在庫引当RowChangeEvent(CType(e.Row,パーツ在庫引当Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.パーツ在庫引当RowDeletingEvent) Is Nothing) Then
                RaiseEvent パーツ在庫引当RowDeleting(Me, New パーツ在庫引当RowChangeEvent(CType(e.Row,パーツ在庫引当Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeパーツ在庫引当Row(ByVal row As パーツ在庫引当Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫引当Row
        Inherits DataRow
        
        Private tableパーツ在庫引当 As パーツ在庫引当DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableパーツ在庫引当 = CType(Me.Table,パーツ在庫引当DataTable)
        End Sub
        
        Public Property パーツ名称 As String
            Get
                Return CType(Me(Me.tableパーツ在庫引当.パーツ名称Column),String)
            End Get
            Set
                Me(Me.tableパーツ在庫引当.パーツ名称Column) = value
            End Set
        End Property
        
        Public Property 引当数 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableパーツ在庫引当.引当数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.tableパーツ在庫引当.引当数Column) = value
            End Set
        End Property
        
        Public Function Is引当数Null() As Boolean
            Return Me.IsNull(Me.tableパーツ在庫引当.引当数Column)
        End Function
        
        Public Sub Set引当数Null()
            Me(Me.tableパーツ在庫引当.引当数Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class パーツ在庫引当RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As パーツ在庫引当Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As パーツ在庫引当Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As パーツ在庫引当Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注ファイルDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnF1 As DataColumn
        
        Private columnF2 As DataColumn
        
        Private columnF3 As DataColumn
        
        Private columnF4 As DataColumn
        
        Private columnF5 As DataColumn
        
        Friend Sub New()
            MyBase.New("受注ファイル")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property F1Column As DataColumn
            Get
                Return Me.columnF1
            End Get
        End Property
        
        Friend ReadOnly Property F2Column As DataColumn
            Get
                Return Me.columnF2
            End Get
        End Property
        
        Friend ReadOnly Property F3Column As DataColumn
            Get
                Return Me.columnF3
            End Get
        End Property
        
        Friend ReadOnly Property F4Column As DataColumn
            Get
                Return Me.columnF4
            End Get
        End Property
        
        Friend ReadOnly Property F5Column As DataColumn
            Get
                Return Me.columnF5
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 受注ファイルRow
            Get
                Return CType(Me.Rows(index),受注ファイルRow)
            End Get
        End Property
        
        Public Event 受注ファイルRowChanged As 受注ファイルRowChangeEventHandler
        
        Public Event 受注ファイルRowChanging As 受注ファイルRowChangeEventHandler
        
        Public Event 受注ファイルRowDeleted As 受注ファイルRowChangeEventHandler
        
        Public Event 受注ファイルRowDeleting As 受注ファイルRowChangeEventHandler
        
        Public Overloads Sub Add受注ファイルRow(ByVal row As 受注ファイルRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add受注ファイルRow(ByVal F1 As String, ByVal F2 As String, ByVal F3 As String, ByVal F4 As String, ByVal F5 As String) As 受注ファイルRow
            Dim row受注ファイルRow As 受注ファイルRow = CType(Me.NewRow,受注ファイルRow)
            row受注ファイルRow.ItemArray = New Object() {F1, F2, F3, F4, F5}
            Me.Rows.Add(row受注ファイルRow)
            Return row受注ファイルRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 受注ファイルDataTable = CType(MyBase.Clone,受注ファイルDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 受注ファイルDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnF1 = Me.Columns("F1")
            Me.columnF2 = Me.Columns("F2")
            Me.columnF3 = Me.Columns("F3")
            Me.columnF4 = Me.Columns("F4")
            Me.columnF5 = Me.Columns("F5")
        End Sub
        
        Private Sub InitClass()
            Me.columnF1 = New DataColumn("F1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnF1)
            Me.columnF2 = New DataColumn("F2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnF2)
            Me.columnF3 = New DataColumn("F3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnF3)
            Me.columnF4 = New DataColumn("F4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnF4)
            Me.columnF5 = New DataColumn("F5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnF5)
        End Sub
        
        Public Function New受注ファイルRow() As 受注ファイルRow
            Return CType(Me.NewRow,受注ファイルRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 受注ファイルRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(受注ファイルRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.受注ファイルRowChangedEvent) Is Nothing) Then
                RaiseEvent 受注ファイルRowChanged(Me, New 受注ファイルRowChangeEvent(CType(e.Row,受注ファイルRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.受注ファイルRowChangingEvent) Is Nothing) Then
                RaiseEvent 受注ファイルRowChanging(Me, New 受注ファイルRowChangeEvent(CType(e.Row,受注ファイルRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.受注ファイルRowDeletedEvent) Is Nothing) Then
                RaiseEvent 受注ファイルRowDeleted(Me, New 受注ファイルRowChangeEvent(CType(e.Row,受注ファイルRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.受注ファイルRowDeletingEvent) Is Nothing) Then
                RaiseEvent 受注ファイルRowDeleting(Me, New 受注ファイルRowChangeEvent(CType(e.Row,受注ファイルRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove受注ファイルRow(ByVal row As 受注ファイルRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注ファイルRow
        Inherits DataRow
        
        Private table受注ファイル As 受注ファイルDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table受注ファイル = CType(Me.Table,受注ファイルDataTable)
        End Sub
        
        Public Property F1 As String
            Get
                Try 
                    Return CType(Me(Me.table受注ファイル.F1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注ファイル.F1Column) = value
            End Set
        End Property
        
        Public Property F2 As String
            Get
                Try 
                    Return CType(Me(Me.table受注ファイル.F2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注ファイル.F2Column) = value
            End Set
        End Property
        
        Public Property F3 As String
            Get
                Try 
                    Return CType(Me(Me.table受注ファイル.F3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注ファイル.F3Column) = value
            End Set
        End Property
        
        Public Property F4 As String
            Get
                Try 
                    Return CType(Me(Me.table受注ファイル.F4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注ファイル.F4Column) = value
            End Set
        End Property
        
        Public Property F5 As String
            Get
                Try 
                    Return CType(Me(Me.table受注ファイル.F5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table受注ファイル.F5Column) = value
            End Set
        End Property
        
        Public Function IsF1Null() As Boolean
            Return Me.IsNull(Me.table受注ファイル.F1Column)
        End Function
        
        Public Sub SetF1Null()
            Me(Me.table受注ファイル.F1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsF2Null() As Boolean
            Return Me.IsNull(Me.table受注ファイル.F2Column)
        End Function
        
        Public Sub SetF2Null()
            Me(Me.table受注ファイル.F2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsF3Null() As Boolean
            Return Me.IsNull(Me.table受注ファイル.F3Column)
        End Function
        
        Public Sub SetF3Null()
            Me(Me.table受注ファイル.F3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsF4Null() As Boolean
            Return Me.IsNull(Me.table受注ファイル.F4Column)
        End Function
        
        Public Sub SetF4Null()
            Me(Me.table受注ファイル.F4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsF5Null() As Boolean
            Return Me.IsNull(Me.table受注ファイル.F5Column)
        End Function
        
        Public Sub SetF5Null()
            Me(Me.table受注ファイル.F5Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 受注ファイルRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 受注ファイルRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 受注ファイルRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 受注ファイルRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 月別出庫データDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column年月 As DataColumn
        
        Private column出庫数 As DataColumn
        
        Friend Sub New()
            MyBase.New("月別出庫データ")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property 年月Column As DataColumn
            Get
                Return Me.column年月
            End Get
        End Property
        
        Friend ReadOnly Property 出庫数Column As DataColumn
            Get
                Return Me.column出庫数
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As 月別出庫データRow
            Get
                Return CType(Me.Rows(index),月別出庫データRow)
            End Get
        End Property
        
        Public Event 月別出庫データRowChanged As 月別出庫データRowChangeEventHandler
        
        Public Event 月別出庫データRowChanging As 月別出庫データRowChangeEventHandler
        
        Public Event 月別出庫データRowDeleted As 月別出庫データRowChangeEventHandler
        
        Public Event 月別出庫データRowDeleting As 月別出庫データRowChangeEventHandler
        
        Public Overloads Sub Add月別出庫データRow(ByVal row As 月別出庫データRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add月別出庫データRow(ByVal 年月 As String, ByVal 出庫数 As Integer) As 月別出庫データRow
            Dim row月別出庫データRow As 月別出庫データRow = CType(Me.NewRow,月別出庫データRow)
            row月別出庫データRow.ItemArray = New Object() {年月, 出庫数}
            Me.Rows.Add(row月別出庫データRow)
            Return row月別出庫データRow
        End Function
        
        Public Function FindBy年月(ByVal 年月 As String) As 月別出庫データRow
            Return CType(Me.Rows.Find(New Object() {年月}),月別出庫データRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As 月別出庫データDataTable = CType(MyBase.Clone,月別出庫データDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New 月別出庫データDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column年月 = Me.Columns("年月")
            Me.column出庫数 = Me.Columns("出庫数")
        End Sub
        
        Private Sub InitClass()
            Me.column年月 = New DataColumn("年月", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column年月)
            Me.column出庫数 = New DataColumn("出庫数", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column出庫数)
            Me.Constraints.Add(New UniqueConstraint("dsWorkKey3", New DataColumn() {Me.column年月}, true))
            Me.column年月.AllowDBNull = false
            Me.column年月.Unique = true
        End Sub
        
        Public Function New月別出庫データRow() As 月別出庫データRow
            Return CType(Me.NewRow,月別出庫データRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New 月別出庫データRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(月別出庫データRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.月別出庫データRowChangedEvent) Is Nothing) Then
                RaiseEvent 月別出庫データRowChanged(Me, New 月別出庫データRowChangeEvent(CType(e.Row,月別出庫データRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.月別出庫データRowChangingEvent) Is Nothing) Then
                RaiseEvent 月別出庫データRowChanging(Me, New 月別出庫データRowChangeEvent(CType(e.Row,月別出庫データRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.月別出庫データRowDeletedEvent) Is Nothing) Then
                RaiseEvent 月別出庫データRowDeleted(Me, New 月別出庫データRowChangeEvent(CType(e.Row,月別出庫データRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.月別出庫データRowDeletingEvent) Is Nothing) Then
                RaiseEvent 月別出庫データRowDeleting(Me, New 月別出庫データRowChangeEvent(CType(e.Row,月別出庫データRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove月別出庫データRow(ByVal row As 月別出庫データRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 月別出庫データRow
        Inherits DataRow
        
        Private table月別出庫データ As 月別出庫データDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table月別出庫データ = CType(Me.Table,月別出庫データDataTable)
        End Sub
        
        Public Property 年月 As String
            Get
                Return CType(Me(Me.table月別出庫データ.年月Column),String)
            End Get
            Set
                Me(Me.table月別出庫データ.年月Column) = value
            End Set
        End Property
        
        Public Property 出庫数 As Integer
            Get
                Try 
                    Return CType(Me(Me.table月別出庫データ.出庫数Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("値は DBNull であるため、取得できません。", e)
                End Try
            End Get
            Set
                Me(Me.table月別出庫データ.出庫数Column) = value
            End Set
        End Property
        
        Public Function Is出庫数Null() As Boolean
            Return Me.IsNull(Me.table月別出庫データ.出庫数Column)
        End Function
        
        Public Sub Set出庫数Null()
            Me(Me.table月別出庫データ.出庫数Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class 月別出庫データRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As 月別出庫データRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As 月別出庫データRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As 月別出庫データRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
