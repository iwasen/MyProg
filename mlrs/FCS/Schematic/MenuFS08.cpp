//*****************************************************************************************************
//  1. ファイル名
//		MenuFS08.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		自己位置・姿勢標定装置−発射制御器−電力分配器画面の操作メニュー処理
//----------------------------------------------------------------------------------------------------
//  3. 備考
//*****************************************************************************************************

#include "stdafx.h"
#include "Schematic.h"
#include "MenuFS08.h"
#include "MenuFS08_1.h"
#include "MenuFS08_2.h"
#include "MenuFS08_3.h"
#include "MenuFS08_4.h"
#include "MenuFS08_5.h"
#include "MenuFS08_6.h"


// CMenuFS08 ダイアログ

IMPLEMENT_DYNCREATE(CMenuFS08, CMenuCommon)

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::CMenuFS08
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		CWnd*	pParent		[I] 親ウィンドウ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CMenuFS08::CMenuFS08(CWnd* pParent /*=NULL*/)
	: CMenuCommon(CMenuFS08::IDD, pParent)
{
	m_pSubMenu = NULL;
}

void CMenuFS08::DoDataExchange(CDataExchange* pDX)
{
	CMenuCommon::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BUTTON_ACTION_1, m_cButtonAction1);
	DDX_Control(pDX, IDC_BUTTON_ACTION_2, m_cButtonAction2);
	DDX_Control(pDX, IDC_BUTTON_ACTION_3, m_cButtonAction3);
	DDX_Control(pDX, IDC_BUTTON_ACTION_4, m_cButtonAction4);
	DDX_Control(pDX, IDC_BUTTON_ACTION_5, m_cButtonAction5);
	DDX_Control(pDX, IDC_BUTTON_ACTION_6, m_cButtonAction6);
	DDX_Control(pDX, IDC_BUTTON_EXIT, m_cButtonExit);
}


BEGIN_MESSAGE_MAP(CMenuFS08, CMenuCommon)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_1, &CMenuFS08::OnBnClickedButtonAction1)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_2, &CMenuFS08::OnBnClickedButtonAction2)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_3, &CMenuFS08::OnBnClickedButtonAction3)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_4, &CMenuFS08::OnBnClickedButtonAction4)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_5, &CMenuFS08::OnBnClickedButtonAction5)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_6, &CMenuFS08::OnBnClickedButtonAction6)
	ON_MESSAGE(WM_USER_ZOOM_IN, OnUserZoomIn)
	ON_MESSAGE(WM_USER_ZOOM_OUT, OnUserZoomOut)
	ON_MESSAGE(WM_USER_SIZE_RESET, OnUserSizeReset)
	ON_MESSAGE(WM_USER_PRINT, OnUserPrint)
	ON_MESSAGE(WM_USER_EXIT, OnUserExit)
	ON_MESSAGE(WM_USER_ACTION, OnUserAction)
END_MESSAGE_MAP()


// CMenuFS08 メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction1
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「発射機駆動装置」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction1()
{
	OpenSubMenu(new CMenuFS08_1);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction2
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「検知スイッチ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction2()
{
	OpenSubMenu(new CMenuFS08_2);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction3
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「トラベルロック」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction3()
{
	OpenSubMenu(new CMenuFS08_3);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction4
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「方位・高低位置検出器及び駆動サーボモータ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction4()
{
	OpenSubMenu(new CMenuFS08_4);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction5
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「方位・高低油圧バルブ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction5()
{
	OpenSubMenu(new CMenuFS08_5);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnBnClickedButtonAction6
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「ブームモータ・ホイストモータ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OnBnClickedButtonAction6()
{
	OpenSubMenu(new CMenuFS08_6);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OpenSubMenu
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		サブメニュー表示処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		CMenuCommon	*pSubMenu		[I] サブメニューダイアログへのポインタ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS08::OpenSubMenu(CMenuCommon *pSubMenu)
{
	m_cButtonAction1.SetEnable(FALSE);
	m_cButtonAction2.SetEnable(FALSE);
	m_cButtonAction3.SetEnable(FALSE);
	m_cButtonAction4.SetEnable(FALSE);
	m_cButtonAction5.SetEnable(FALSE);
	m_cButtonAction6.SetEnable(FALSE);
	m_cButtonExit.SetEnable(FALSE);
	

	m_pSubMenu = pSubMenu;
	m_pSubMenu->DoModeless(this);

	EnableWindow(FALSE);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserZoomIn
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「拡大」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserZoomIn(WPARAM wParam, LPARAM lParam)
{
	return SendMessageParent(WM_USER_ZOOM_IN, wParam, lParam);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserZoomOut
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「縮小」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserZoomOut(WPARAM wParam, LPARAM lParam)
{
	return SendMessageParent(WM_USER_ZOOM_OUT, wParam, lParam);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserSizeReset
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「サイズリセット」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserSizeReset(WPARAM wParam, LPARAM lParam)
{
	return SendMessageParent(WM_USER_SIZE_RESET, wParam, lParam);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserPrint
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「印刷」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserPrint(WPARAM wParam, LPARAM lParam)
{
	return SendMessageParent(WM_USER_PRINT, wParam, lParam);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserExit
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「終了」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserExit(WPARAM wParam, LPARAM lParam)
{
	if (m_pSubMenu != NULL) {
		m_pSubMenu->DestroyWindow();
		m_pSubMenu = NULL;
	}

	EnableWindow(TRUE);
	SetActiveWindow();

	m_cButtonAction1.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonAction2.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonAction3.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonAction4.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonAction5.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonAction6.SetEnableAndCheck(TRUE, FALSE);
	m_cButtonExit.SetEnable(TRUE);

	return 0;
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS08::OnUserAction
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		動作ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		WPARAM	wParam		[I] メッセージパラメータ
//		LPARAM	lParam		[I] メッセージパラメータ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LRESULT		メッセージ処理結果
//*****************************************************************************************************
LRESULT CMenuFS08::OnUserAction(WPARAM wParam, LPARAM lParam)
{
	return SendMessageParent(WM_USER_ACTION, wParam, lParam);
}
