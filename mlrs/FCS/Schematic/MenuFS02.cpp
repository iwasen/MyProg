//*****************************************************************************************************
//  1. ファイル名
//		MenuFS02.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		電源系（結線図）画面の操作メニュー処理
//----------------------------------------------------------------------------------------------------
//  3. 備考
//*****************************************************************************************************

#include "stdafx.h"
#include "Schematic.h"
#include "MenuFS02.h"


// CMenuFS02 ダイアログ

IMPLEMENT_DYNCREATE(CMenuFS02, CMenuCommon)

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::CMenuFS02
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		コンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		CWnd*	pParent		[I] 親ウィンドウ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CMenuFS02::CMenuFS02(CWnd* pParent /*=NULL*/)
	: CMenuCommon(CMenuFS02::IDD, pParent)
{

}

void CMenuFS02::DoDataExchange(CDataExchange* pDX)
{
	CMenuCommon::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BUTTON_ACTION_1, m_cButtonAction1);
	DDX_Control(pDX, IDC_BUTTON_ACTION_2, m_cButtonAction2);
	DDX_Control(pDX, IDC_BUTTON_ACTION_3, m_cButtonAction3);
	DDX_Control(pDX, IDC_BUTTON_ACTION_4, m_cButtonAction4);
}


BEGIN_MESSAGE_MAP(CMenuFS02, CMenuCommon)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_1, &CMenuFS02::OnBnClickedButtonAction1)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_2, &CMenuFS02::OnBnClickedButtonAction2)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_3, &CMenuFS02::OnBnClickedButtonAction3)
	ON_BN_CLICKED(IDC_BUTTON_ACTION_4, &CMenuFS02::OnBnClickedButtonAction4)
END_MESSAGE_MAP()


// CMenuFS02 メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::OnInitDialog
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ダイアログ初期化処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	TRUE
//*****************************************************************************************************
BOOL CMenuFS02::OnInitDialog()
{
	CMenuCommon::OnInitDialog();

	// 動作ステータス設定
	SetStatus(STATUS_PANEL_OFF, STATUS_POWER_OFF);

	return FALSE;
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::OnBnClickedButtonAction1
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「ＯＦＦ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::OnBnClickedButtonAction1()
{
	// 動作ステータス設定
	SetStatus(STATUS_PANEL_OFF, m_ePowerStatus);

	// Flashへ操作指示送信
	SendAction(m_ePowerStatus ? ACTION_2 : ACTION_1);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::OnBnClickedButtonAction2
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「ＯＮ」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::OnBnClickedButtonAction2()
{
	// 動作ステータス設定
	SetStatus(STATUS_PANEL_ON, STATUS_POWER_ON);

	// Flashへ操作指示送信
	SendAction(ACTION_3);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::OnBnClickedButtonAction3
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「切」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::OnBnClickedButtonAction3()
{
	// 動作ステータス設定
	SetStatus(STATUS_PANEL_OFF, STATUS_POWER_OFF);

	// Flashへ操作指示送信
	SendAction(ACTION_1);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::OnBnClickedButtonAction4
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		「入」ボタンクリック処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::OnBnClickedButtonAction4()
{
	// 動作ステータス設定
	SetStatus(m_ePanelStatus, STATUS_POWER_ON);

	// Flashへ操作指示送信
	SendAction(m_ePanelStatus ? ACTION_3 : ACTION_2);
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::SetStatus
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		動作ステータス設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		EPanelStatus	ePanelStatus		[I] 射撃統制パネル電源動作ステータス
//		EPowerStatus	ePowerStatus		[I] 電源併入動作ステータス
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::SetStatus(EPanelStatus ePanelStatus, EPowerStatus ePowerStatus)
{
	// 動作ステータス設定
	m_ePanelStatus = ePanelStatus;
	m_ePowerStatus = ePowerStatus;

	// メニューボタン設定
	SetMenuButton();
}

//*****************************************************************************************************
//  1. 関数名
//		CMenuFS02::SetMenuButton
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		メニューボタン設定処理
//----------------------------------------------------------------------------------------------------
//  3. パラメータ
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CMenuFS02::SetMenuButton()
{
	switch (m_ePanelStatus) {
	case STATUS_PANEL_OFF:
		m_cButtonAction1.SetEnableAndCheck(FALSE, TRUE);
		m_cButtonAction2.SetEnableAndCheck(m_ePowerStatus == STATUS_POWER_ON, FALSE);
		break;
	case STATUS_PANEL_ON:
		m_cButtonAction1.SetEnableAndCheck(m_ePowerStatus == STATUS_POWER_ON, FALSE);
		m_cButtonAction2.SetEnableAndCheck(FALSE, TRUE);
		break;
	}

	switch (m_ePowerStatus) {
	case STATUS_POWER_OFF:
		m_cButtonAction3.SetEnableAndCheck(FALSE, TRUE);
		m_cButtonAction4.SetEnableAndCheck(TRUE, FALSE);
		break;
	case STATUS_POWER_ON:
		m_cButtonAction3.SetEnableAndCheck(m_ePanelStatus == STATUS_PANEL_OFF, FALSE);
		m_cButtonAction4.SetEnableAndCheck(FALSE, TRUE);
		break;
	}
}
