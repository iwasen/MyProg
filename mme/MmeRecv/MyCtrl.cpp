//*****************************************************************************************************
//  1. ファイル名
//		MyCtrl.cpp
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		拡張コントロールクラスの実装
//----------------------------------------------------------------------------------------------------
//  3. 備考
//*****************************************************************************************************

#include "stdafx.h"
#include "MyCtrl.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define TS_MARGIN	10

/////////////////////////////////////////////////////////////////////////////
// CButtonEx


BEGIN_MESSAGE_MAP(CButtonEx, CButton)
	ON_WM_CTLCOLOR_REFLECT()
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CButtonEx メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::CButtonEx
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールのコンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CButtonEx::CButtonEx()
{
	m_bSetTextColor = FALSE;
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールへのBOOL代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		BOOL	param			[I] チェック状態
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
BOOL CButtonEx::operator=(BOOL param)
{
	if (GetCheck() != param)
		SetCheck(param);

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::operator BOOL
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールのBOOLへのキャスト
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL	チェック状態
//*****************************************************************************************************
CButtonEx::operator BOOL()
{
	return GetCheck();
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールのLPCTSTR代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR	pText			[I] ボタンに表示する文字列
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LPCTSTR		ボタンに表示する文字列
//*****************************************************************************************************
LPCTSTR CButtonEx::operator=(LPCTSTR pText)
{
	SetWindowText(pText);
	return pText;
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::SetTextColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールの文字色設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		COLORREF	colorText			[I] 文字色
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CButtonEx::SetTextColor(COLORREF colorText)
{
	m_colorText = colorText;
	m_bSetTextColor = TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::SetBackColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールの背景色設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		COLORREF	colorBack			[I] 背景色
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CButtonEx::SetBackColor(COLORREF colorBack)
{
	m_brushBG.DeleteObject();
	m_brushBG.CreateSolidBrush(colorBack);
}

//*****************************************************************************************************
//  1. 関数名
//		CButtonEx::CtlColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		ボタンコントロールのWM_CTLCOLORメッセージハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CDC		*pDC			[I] デバイスコンテキスト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		HBRUSH		背景のブラシ
//*****************************************************************************************************
HBRUSH CButtonEx::CtlColor(CDC* pDC, UINT /*nCtlColor*/)
{
	HBRUSH brush = NULL;

	if (m_bSetTextColor) {
		pDC->SetTextColor(m_colorText);
		pDC->SetBkColor(::GetSysColor(COLOR_3DFACE));
		brush = (HBRUSH)::GetSysColorBrush(COLOR_3DFACE);
	}	

	if (m_brushBG.m_hObject)
		brush = (HBRUSH)m_brushBG.m_hObject;

	return brush;
}

/////////////////////////////////////////////////////////////////////////////
// CEditEx

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::CEditEx
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのコンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CEditEx::CEditEx()
{
	m_bSetTextColor = FALSE;
	m_nTextColor = (COLORREF)-1;
}


BEGIN_MESSAGE_MAP(CEditEx, CEdit)
	ON_WM_CTLCOLOR_REFLECT()
	ON_WM_CHAR()
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CEditEx メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールへのint代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int		param			[I] 代入するint値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int		代入したint値
//*****************************************************************************************************
int CEditEx::operator=(int param)
{
	CString str1, str2;

	str1.Format("%d", param);
	GetWindowText(str2);

	if (str1 != str2) {
		SetWindowText(str1);
		UpdateWindow();
	}

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールへのdouble代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		double		param			[I] 代入するdouble値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		double		代入したdouble値
//*****************************************************************************************************
double CEditEx::operator=(double param)
{
	CString str1, str2;

	str1.Format("%g", param);
	GetWindowText(str2);

	if (str1 != str2) {
		SetWindowText(str1);
		UpdateWindow();
	}

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールへのCString代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CString		&param			[I] 代入するCString値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		CString		代入したCString値
//*****************************************************************************************************
CString &CEditEx::operator=(CString &param)
{
	CString str2;

	GetWindowText(str2);

	if (param != str2) {
		SetWindowText(param);
		UpdateWindow();
	}

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールへのLPCTSTR代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		param			[I] 代入するLPCTSTR値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LPCTSTR		代入したLPCTSTR値
//*****************************************************************************************************
LPCTSTR CEditEx::operator=(LPCTSTR param)
{
	CString str2;

	GetWindowText(str2);

	if (str2 != param) {
		SetWindowText(param);
		UpdateWindow();
	}

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールへのCEditEx代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CEditEx		&param			[I] 代入するCEditExコントロール
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		CEditEx		代入したCEditExコントロール
//*****************************************************************************************************
CEditEx &CEditEx::operator=(CEditEx &param)
{
	CString str;

	param.GetWindowText(str);
	SetWindowText(str);
	UpdateWindow();

	return param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator==
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールとLPCTSTRの==演算オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		param			[I] 比較するLPCTSTR値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int			演算結果
//*****************************************************************************************************
int CEditEx::operator==(LPCTSTR param)
{
	GetWindowText(m_str);
	return m_str == param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator==
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールとintの==演算オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int		param			[I] 比較するint値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int			比較結果
//*****************************************************************************************************
int CEditEx::operator==(int param)
{
	GetWindowText(m_str);
	return atoi(m_str) == param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator!=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールとintの!=演算オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		int		param			[I] 比較するint値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int			比較結果
//*****************************************************************************************************
int CEditEx::operator!=(int param)
{
	GetWindowText(m_str);
	return atoi(m_str) != param;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator int
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのintへのキャスト
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		int			キャストしたint値
//*****************************************************************************************************
CEditEx::operator int()
{
	GetWindowText(m_str);
	return atoi(m_str);
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator double
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのdoubleへのキャスト
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		double		キャストしたdouble値
//*****************************************************************************************************
CEditEx::operator double()
{
	GetWindowText(m_str);
	return atof(m_str);
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::operator CString
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのCStringへのキャスト
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		CString		キャストしたCString値
//*****************************************************************************************************
CEditEx::operator CString()
{
	GetWindowText(m_str);
	return m_str;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::IsEmpty
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		空文字かチェックする
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		BOOL		空文字の場合TRUE、それ以外FALSE
//*****************************************************************************************************
BOOL CEditEx::IsEmpty()
{
	GetWindowText(m_str);
	return m_str.IsEmpty();
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::Format
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		書式による文字列設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		lpszFormat			[I] 書式文字列
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CEditEx::Format(LPCTSTR lpszFormat, ...)
{
	va_list vl;
	char str[256];
	CString str2;

	va_start(vl, lpszFormat);
	vsprintf_s(str, lpszFormat, vl);

	GetWindowText(str2);

	if (str2 != str) {
		SetWindowText(str);
		UpdateWindow();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::Blank
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		空文字を設定する
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CEditEx::Blank()
{
	CString str;

	GetWindowText(str);
	if (!str.IsEmpty()) {
		SetWindowText("");
		UpdateWindow();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::SetTextColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		文字色を設定する
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		COLORREF	color			[I] 書文字色
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CEditEx::SetTextColor(COLORREF color)
{
	if (!m_bSetTextColor) {
		m_Brush.CreateSolidBrush(::GetSysColor(COLOR_3DFACE));
		m_bSetTextColor = TRUE;
	}

	if (color != m_nTextColor) {
		m_nTextColor = color;
		Invalidate();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::CtlColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのWM_CTLCOLORメッセージハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CDC		*pDC			[I] デバイスコンテキスト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		HBRUSH		背景のブラシ
//*****************************************************************************************************
HBRUSH CEditEx::CtlColor(CDC* pDC, UINT /*nCtlColor*/) 
{
	if (m_bSetTextColor) {
		pDC->SetTextColor(m_nTextColor);
		pDC->SetBkMode(TRANSPARENT);
		return (HBRUSH)m_Brush;
	}

	return NULL;
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::SetValidChar
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールに入力可能な文字種類の設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		UINT		nValidChar			[I] 文字種類
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CEditEx::SetValidChar(UINT nValidChar)
{
	m_sValidStr = "\b\x03\x16\x18";		// BS,CTRL+C,CTRL+V,CTRL+X
	if (nValidChar & VC_NUM)
		m_sValidStr += "0123456789";
	if (nValidChar & VC_MINUS)
		m_sValidStr += "-";
	if (nValidChar & VC_POINT)
		m_sValidStr += ".";
	if (nValidChar & VC_EXP)
		m_sValidStr += "eE";
}

//*****************************************************************************************************
//  1. 関数名
//		CEditEx::OnChar
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		エディットコントロールのWM_CHARメッセージハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		UINT	nChar			[I] 入力された文字
//		UINT	nRepCnt			[I] リピートカウント
//		UINT	nFlags			[I] フラグ
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CEditEx::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags) 
{
	switch(nChar) {
	case 0x0d:
		GetParent()->SendMessage(WM_KEY_RET_KEY, this->GetDlgCtrlID(), 0);
		return;
	case 0x09:
		break;
	default:
//		break;
		if (!m_sValidStr.IsEmpty()) {
			if (strchr(m_sValidStr, nChar) == NULL) {
				MessageBeep(0);
				return;
			}
		}
	}

	CEdit::OnChar(nChar, nRepCnt, nFlags);
}


// CStaticEx

IMPLEMENT_DYNAMIC(CStaticEx, CStatic)


BEGIN_MESSAGE_MAP(CStaticEx, CStatic)
	ON_WM_CTLCOLOR_REFLECT()
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_MESSAGE(WM_MOUSELEAVE, &CStaticEx::OnMouseLeave)
END_MESSAGE_MAP()



// CStaticEx メッセージ ハンドラ

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::CStaticEx
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールのコンストラクタ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
CStaticEx::CStaticEx()
{
	m_bSetTextColor = FALSE;
	m_bMouseTrack = FALSE;
	m_bMouseIn = FALSE;
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::operator=
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールへのLPCTSTR代入オペレータ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		LPCTSTR		pText			[I] 代入するLPCTSTR値
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		LPCTSTR		代入したLPCTSTR値
//*****************************************************************************************************
LPCTSTR CStaticEx::operator=(LPCTSTR pText)
{
	SetWindowText(pText);
	return pText;
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::SetTextColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールの文字色を設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		COLORREF	colorText			[I] 文字色
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CStaticEx::SetTextColor(COLORREF colorText)
{
	m_colorText = colorText;
	m_bSetTextColor = TRUE;
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::SetBackColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールの背景色を設定
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		COLORREF	colorBack			[I] 背景色
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CStaticEx::SetBackColor(COLORREF colorBack)
{
	m_brushBG.DeleteObject();
	m_brushBG.CreateSolidBrush(colorBack);
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::ResetBackColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールの背景色を元に戻す
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CStaticEx::ResetBackColor()
{
	m_brushBG.DeleteObject();
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::Blank
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールにブランクを設定する
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CStaticEx::Blank()
{
	CString str;

	GetWindowText(str);
	if (!str.IsEmpty()) {
		SetWindowText("");
		UpdateWindow();
	}
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::CtlColor
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールのWM_CTLCOLORメッセージハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		CDC		*pDC			[I] デバイスコンテキスト
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		HBRUSH		背景のブラシ
//*****************************************************************************************************
HBRUSH CStaticEx::CtlColor(CDC* pDC, UINT /*nCtlColor*/)
{
	HBRUSH brush = NULL;

	if (m_bSetTextColor) {
		pDC->SetTextColor(m_colorText);
		pDC->SetBkColor(::GetSysColor(COLOR_3DFACE));
		brush = (HBRUSH)::GetSysColorBrush(COLOR_3DFACE);
	}	

	if (m_brushBG.m_hObject) {
		pDC->SetBkMode(TRANSPARENT);
		brush = (HBRUSH)m_brushBG.m_hObject;
	}

	return brush;
}

//*****************************************************************************************************
//  1. 関数名
//		CStaticEx::OnPaint
//----------------------------------------------------------------------------------------------------
//  2. 機能
//		スタティックコントロールのWM_PAINTメッセージハンドラ
//----------------------------------------------------------------------------------------------------
//  3. パラメータ説明
//		無し
//----------------------------------------------------------------------------------------------------
//  4. 戻り値
//		無し
//*****************************************************************************************************
void CStaticEx::OnPaint()
{
	if ((GetStyle() & SS_BLACKRECT) && m_brushBG.m_hObject) {
		CPaintDC dc(this);

		CRect rect;
		GetClientRect(rect);
		dc.FillRect(rect, &m_brushBG);
	} else
		CStatic::OnPaint();
}

void CStaticEx::SetMouseTrack(BOOL bMouseTrack)
{
	m_bMouseTrack = bMouseTrack;
}

void CStaticEx::OnMouseMove(UINT nFlags, CPoint point)
{
	if (m_bMouseTrack) {
		if (!m_bMouseIn) {
			TRACKMOUSEEVENT tme = {0};
			tme.cbSize = sizeof(TRACKMOUSEEVENT);
			tme.dwFlags = TME_LEAVE;
			tme.hwndTrack = m_hWnd;
			_TrackMouseEvent(&tme);

			GetParent()->SendMessage(WM_MOUSEIN, (WPARAM)m_hWnd);
			m_bMouseIn = TRUE;
		}
	}

	CStatic::OnMouseMove(nFlags, point);
}

LRESULT CStaticEx::OnMouseLeave(WPARAM wparam, LPARAM lparam)
{
	GetParent()->SendMessage(WM_MOUSEOUT, (WPARAM)m_hWnd);
	m_bMouseIn = FALSE;

	return 0;
}
